 @page "/salesorder"
@using MyBlazorServerApp.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<div class="main-card">
    <div class="header-container" style="@(isFormVisible ? "display: none;" : "")">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div>
                <h3 class="page-title">Sales Order List</h3>
                <p class="subtitle">Manage all your sales orders</p>
            </div>
            <div class="action-container">
                <div class="search-bar">
                    <InputText class="form-control" @bind-Value="searchText"
                               placeholder="Search by SO ID or Customer..." @oninput="OnSearchInput" />
                </div>
                <button class="btn btn-primary" @onclick="ApplyFilter">Search</button>
                <button class="btn btn-primary" @onclick="ShowAddForm">Add New SO</button>
            </div>
        </div>
    </div>

    @if (isFormVisible)
    {
        <div class="form-container">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                <h3 class="page-title" style="color: #1e3a8a;">
                    @(editingSalesOrder == null ? "Create New Sales Order" : "Edit Sales Order")
                </h3>
                <button class="btn btn-secondary" @onclick="BackToList">View All SOs</button>
            </div>

            <div class="add-card">
                <div class="inner-box">
                    <EditForm Model="salesOrderModel" OnValidSubmit="SaveSalesOrder">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert-danger">@errorMessage</div>
                        }

                        <div class="grid-two">
                            <div class="form-item">
                                <label class="form-label">SO ID</label>
                                <InputText class="form-control" @bind-Value="salesOrderModel.SOId" readonly />
                                @if (editingSalesOrder == null)
                                {
                                    <small class="text-muted">Auto-generated (e.g., SO0001)</small>
                                }
                            </div>

                            <div class="form-item">
                                <label class="form-label">Customer <span class="text-danger">*</span></label>
                                <InputSelect class="form-control"
                                             @bind-Value="salesOrderModel.CustomerId"
                                             required>
                                    <option value="">-- Select Customer --</option>
                                    @foreach (var cust in customers)
                                    {
                                        <option value="@cust.Id">@cust.Name</option>
                                    }
                                </InputSelect>
                            </div>

                            <div class="form-item">
                                <label class="form-label">Order Date <span class="text-danger">*</span></label>
                                <InputDate class="form-control" @bind-Value="salesOrderModel.OrderDate" required />
                            </div>
                        </div>

                        <div class="grid-two">
                            <div class="form-item">
                                <label class="form-label">Expected Delivery</label>
                                <InputDate class="form-control" @bind-Value="salesOrderModel.ExpectedDelivery" />
                            </div>

                            <div class="form-item">
                                <label class="form-label">Status</label>
                                <InputSelect class="form-control" @bind-Value="salesOrderModel.Status">
                                    <option value="">Select Status</option>
                                    <option>Pending</option>
                                    <option>Processed</option>
                                    <option>Shipped</option>
                                    <option>Delivered</option>
                                    <option>Cancelled</option>
                                </InputSelect>
                            </div>

                            <div class="form-item">
                                <label class="form-label">Remarks</label>
                                <InputTextArea class="form-control" @bind-Value="salesOrderModel.Remarks" />
                            </div>
                        </div>

                        <h4 class="section-title" style="color: #1e3a8a; margin-top: 25px;">Sales Order Items</h4>

                        <!-- ROW 1 -->
                        <div class="grid-three">
                            <div class="form-item">
                                <label class="form-label">Product <span class="text-danger">*</span></label>
                                <InputSelect class="form-control"
                                             @bind-Value="selectedProductId"
                                             @onchange="OnProductSelected">
                                    <option value="">-- Select Product --</option>
                                    @foreach (var p in products)
                                    {
                                        <option value="@p.Id">@p.Name</option>
                                    }
                                </InputSelect>
                            </div>

                            <div class="form-item">
                                <label class="form-label">Category <span class="text-danger">*</span></label>
                                <InputSelect class="form-control" @bind-Value="selectedCategory">
                                    <option value="">-- Select Category --</option>
                                    @foreach (var cat in categories)
                                    {
                                        <option value="@cat">@cat</option>
                                    }
                                </InputSelect>
                            </div>

                            <div class="form-item">
                                <label class="form-label">Quantity <span class="text-danger">*</span></label>
                                <InputNumber class="form-control" @bind-Value="newItem.Quantity" />
                            </div>
                        </div>

                        <!-- ROW 2 -->
                        <div class="grid-three">
                            <div class="form-item">
                                <label class="form-label">Rate <span class="text-danger">*</span></label>
                                <InputNumber class="form-control" @bind-Value="newItem.Rate" />
                            </div>

                            <div class="form-item">
                                <label class="form-label">Discount %</label>
                                <InputNumber class="form-control" @bind-Value="newItem.DiscountPercent" />
                            </div>

                            <div class="form-item">
                                <label class="form-label">GST %</label>
                                <InputNumber class="form-control" @bind-Value="newItem.GSTPercent" />
                            </div>
                        </div>

                        <!-- ROW 3 -->
                        <div class="grid-two" style="align-items: end;">
                            <div class="form-item">
                                <label class="form-label">Line Total</label>
                                <div class="form-control" style="font-weight: bold; background:#f8f9fa; color:#1e3a8a;">
                                    <strong>₹ @newItem.LineTotal.ToString("N2")</strong>
                                </div>
                            </div>

                            <div class="form-item">
                                <label class="form-label">Tax Mode</label>
                                <div class="radio-group">
                                    <label>
                                        <input type="radio" name="taxMode" value="Line Exclusive"
                                               checked="@(newItem.TaxMode == "Line Exclusive")"
                                               @onchange="OnTaxModeChange" class="radio-input" />
                                        Exclusive
                                    </label>
                                    <label>
                                        <input type="radio" name="taxMode" value="Line Inclusive"
                                               checked="@(newItem.TaxMode == "Line Inclusive")"
                                               @onchange="OnTaxModeChange" class="radio-input" />
                                        Inclusive
                                    </label>
                                </div>
                            </div>
                        </div>

                        <div class="form-actions actions-right" style="margin-top: 15px;">
                            <button type="button" class="btn btn-primary" @onclick="AddItem">Add Item</button>
                        </div>

                        <!-- ITEMS TABLE -->
                        <div class="items-table" style="margin-top: 20px;">
                            <table class="table table-custom">
                                <thead>
                                    <tr>
                                        <th>Product Name</th>
                                        <th>Category</th>
                                        <th>Qty</th>
                                        <th>Rate</th>
                                        <th>Disc %</th>
                                        <th>GST %</th>
                                        <th>Line Total</th>
                                        <th>Tax Mode</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (salesOrderModel.Items != null && salesOrderModel.Items.Any())
                                    {
                                        foreach (var item in salesOrderModel.Items)
                                        {
                                            <tr>
                                                <td>@(item.ProductName ?? "N/A")</td>
                                                <td>@(item.Category ?? "N/A")</td>
                                                <td>@item.Quantity</td>
                                                <td><strong>₹ @(item.Rate > 0 ? item.Rate.ToString("N2") : "0.00")</strong></td>
                                                <td>@(item.DiscountPercent > 0 ? item.DiscountPercent.ToString("F1") : "0.0")</td>
                                                <td>@(item.GSTPercent > 0 ? item.GSTPercent.ToString("F1") : "0.0")</td>
                                                <td><strong>₹ @(item.LineTotal > 0 ? item.LineTotal.ToString("N2") : "0.00")</strong></td>
                                                <td>@(item.TaxMode ?? "N/A")</td>
                                                <td>
                                                    <button class="btn-action btn-sm" @onclick="() => RemoveItem(item)">
                                                        Delete
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr><td colspan="9" class="text-center">No items added.</td></tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="summary" style="margin-top: 25px;">
                            <div class="form-item">
                                <label class="form-label">Total Amount</label>
                                <div class="form-control"
                                     style="font-weight:bold;background:#f8f9fa;color:#1e3a8a;">
                                    <strong>₹ @salesOrderModel.TotalAmount.ToString("N2")</strong>
                                </div>
                            </div>

                            <div class="form-actions actions-right" style="margin-top: 15px;">
                                <button type="submit" class="btn btn-primary">Save Sales Order</button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }

    @if (!isFormVisible)
    {
        <div class="product-table-box">
            <!-- SALES ORDERS LIST -->
            <table class="table table-custom">
                <thead>
                    <tr>
                        <th>SO ID</th>
                        <th>Customer Name</th>
                        <th>Order Date</th>
                        <th>Expected Delivery</th>
                        <th>Total Amount</th>
                        <th>Status</th>
                        <th style="width:220px;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredSalesOrders.Count == 0)
                    {
                        <tr><td colspan="7" class="text-center">No sales orders found.</td></tr>
                    }
                    else
                    {
                        foreach (var so in filteredSalesOrders)
                        {
                            <tr>
                                <td>@(so.SOId ?? "N/A")</td>
                                <td>@(so.Customer?.Name ?? so.CustomerName ?? "N/A")</td>
                                <td>@(so.OrderDate != default ? so.OrderDate.ToShortDateString() : "N/A")</td>
                                <td>@(so.ExpectedDelivery != null ? so.ExpectedDelivery.Value.ToShortDateString() : "N/A")</td>
                                <td><strong>₹ @(so.TotalAmount > 0 ? so.TotalAmount.ToString("N2") : "0.00")</strong></td>
                                <td>@(so.Status ?? "N/A")</td>
                                <td>
                                    <button class="btn-action btn-sm me-1" @onclick="() => EditSalesOrder(so)">Edit</button>
                                    <button class="btn-action btn-sm me-1" @onclick="() => DeleteSalesOrder(so)">Delete</button>
                                    <button class="btn-action btn-sm" @onclick="() => PrintSalesOrder(so)">Print</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<style>
    /* === BRAND COLORS === */
    :root {
        --brand-blue: #1e3a8a;
        --brand-blue-strong: #15255a;
        --brand-blue-soft: rgba(30,58,138,0.10);
        --brand-blue-border: rgba(30,58,138,0.20);
    }

    /* === LAYOUT === */
    .main-card {
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,.1);
        padding: 20px;
        margin-bottom: 20px;
    }

    .header-container {
        margin-bottom: 20px;
    }

    .page-title {
        margin: 0;
        font-size: 24px;
        color: var(--brand-blue);
    }

    .subtitle {
        margin: 5px 0;
        color: #6c757d;
    }

    .action-container {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
        align-items: center;
    }

    .search-bar {
        flex-grow: 1;
        min-width: 160px;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    .grid-two, .grid-three {
        display: grid;
        gap: 12px;
        margin-bottom: 12px;
    }

    .grid-two {
        grid-template-columns: 1fr 1fr;
    }

    .grid-three {
        grid-template-columns: 1fr 1fr 1fr;
    }

    .form-item {
        display: flex;
        flex-direction: column;
    }

    .form-label {
        margin-bottom: 5px;
        font-weight: bold;
    }

    .text-danger {
        color: #dc3545;
    }

    .radio-group {
        display: flex;
        gap: 15px;
        align-items: center;
    }

    .radio-input {
        margin-right: 5px;
    }

    /* default form-actions (keeps previous behavior) */
    .form-actions {
        margin-top: 10px;
    }

        /* helper to right-align action buttons */
        .form-actions.actions-right {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            align-items: center;
            width: 100%;
        }

            /* make buttons slightly narrower so layout stays neat */
            .form-actions.actions-right .btn {
                min-width: 130px;
            }

    .full-width {
        width: 100%;
    }

    .items-table, .product-table-box {
        margin-top: 20px;
    }

    /* === TABLE === */
    .table-custom {
        width: 100%;
        border-collapse: collapse;
        table-layout: auto;
    }

        /* Body cells */
        .table-custom tbody th,
        .table-custom tbody td {
            padding: 8px;
            text-align: left;
            border: 1px solid var(--brand-blue-border);
            background-color: transparent;
            color: inherit;
            vertical-align: middle;
        }

        /* Alternate row */
        .table-custom tbody tr:nth-child(even) {
            background: #fbfbfd;
        }

        /* === DARK BLUE HEADER — FORCE STYLES === */
        .table-custom thead,
        .table-custom thead tr,
        .table-custom thead th {
            background-color: var(--brand-blue) !important;
            color: #ffffff !important;
        }

            .table-custom thead th {
                padding: 10px 12px !important;
                border-color: rgba(255,255,255,0.08) !important;
                font-weight: 600 !important;
                text-align: left;
            }

    /* === ACTION BUTTONS (mild / same family) === */
    .btn-action {
        background: transparent;
        color: var(--brand-blue);
        border: 1px solid var(--brand-blue-border);
        padding: 6px 10px;
        border-radius: 5px;
        font-weight: 600;
        min-width: 62px;
        text-align: center;
        cursor: pointer;
        transition: all 0.16s ease;
    }

        .btn-action:hover {
            background: rgba(30,58,138,0.12);
            color: var(--brand-blue-strong);
            transform: translateY(-1px);
            box-shadow: 0 2px 6px rgba(30,58,138,0.06);
        }

        .btn-action.btn-sm {
            padding: 4px 8px;
            font-size: 0.85rem;
        }

    /* === PRIMARY & SECONDARY === */
    .btn-primary {
        background: var(--brand-blue);
        color: #fff;
        border: none;
        padding: 8px 15px;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn-secondary {
        background: #6c757d;
        color: #fff;
        border: none;
        padding: 8px 15px;
        border-radius: 4px;
        cursor: pointer;
    }

    .me-1 {
        margin-right: .25rem;
    }

    /* === RESPONSIVE === */
    @@media (max-width: 768px) {
        .grid-two, .grid-three

    {
        grid-template-columns: 1fr;
    }

    .btn-primary, .btn-secondary, .btn-action {
        width: 100%;
        margin-bottom: 8px;
    }

    .action-container {
        justify-content: center;
    }

    .form-actions.actions-right {
        display: block;
        text-align: center;
    }

        .form-actions.actions-right .btn {
            min-width: 0;
            width: 100%;
        }

    }

    @@media (min-width: 769px) and (max-width: 1024px) {
        .grid-two

    {
        grid-template-columns: 1fr 1fr;
    }

    .grid-three {
        grid-template-columns: 1fr 1fr;
    }

    }

    @@media (min-width: 1025px) {
        .grid-two

    {
        grid-template-columns: 1fr 1fr;
    }

    .grid-three {
        grid-template-columns: 1fr 1fr 1fr;
    }

    }
</style>

@code {
    // === ALL C# CODE (UNCHANGED FROM YOUR LAST VERSION)
    private List<MyBlazorServerApp.Models.SalesOrder> salesOrders = new();
    private List<MyBlazorServerApp.Models.SalesOrder> filteredSalesOrders = new();
    private MyBlazorServerApp.Models.SalesOrder salesOrderModel = new();
    private MyBlazorServerApp.Models.SalesOrder? editingSalesOrder;
    private bool isFormVisible = false;
    private string searchText = string.Empty;
    private int currentPage = 1;
    private int pageSize = 5;
    private string? errorMessage;
    private MyBlazorServerApp.Models.SalesOrderItem newItem = new();
    private List<Customer> customers = new();
    private List<Product> products = new();
    private List<string> categories = new();
    private int? selectedProductId;
    private string? selectedCategory;

    private async Task LoadCustomers()
    {
        using var db = DbFactory.CreateDbContext();
        customers = await db.Customers.OrderBy(c => c.Name).ToListAsync();
    }

    private async Task LoadProducts()
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            products = await db.Products
                               .Where(p => !p.IsDeleted)
                               .Include(p => p.ProductGroup)
                               .OrderBy(p => p.Name)
                               .ToListAsync();

            categories = products
                .Where(p => p.ProductGroup?.Name != null)
                .Select(p => p.ProductGroup!.Name!)
                .Distinct()
                .OrderBy(n => n)
                .ToList();

            if (products.Any(p => p.ProductGroup == null) && !categories.Contains("Uncategorized"))
                categories.Insert(0, "Uncategorized");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading products: " + ex.Message);
            products = new();
            categories = new();
        }
    }

    private async Task<string> GenerateNextSOId(AppDbContext db)
    {
        var last = await db.SalesOrders
            .Where(p => p.SOId != null && p.SOId.StartsWith("SO"))
            .OrderByDescending(p => p.SOId)
            .FirstOrDefaultAsync();

        if (last == null || string.IsNullOrEmpty(last.SOId))
            return "SO0001";

        var num = int.Parse(last.SOId.Replace("SO", ""));
        return $"SO{(num + 1):D4}";
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(LoadSalesOrders(), LoadCustomers(), LoadProducts());
        ApplyFilter();
    }

    private async Task LoadSalesOrders()
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            salesOrders = await db.SalesOrders
                .Include(so => so.Items)
                .Include(so => so.Customer)
                .ToListAsync();
            filteredSalesOrders = salesOrders.ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading sales orders: {ex.Message}";
        }
    }

    private async Task ShowAddForm()
    {
        editingSalesOrder = null;
        salesOrderModel = new MyBlazorServerApp.Models.SalesOrder
        {
            Items = new List<MyBlazorServerApp.Models.SalesOrderItem>(),
            OrderDate = DateTime.Today,
            Status = "Pending"
        };

        using var db = DbFactory.CreateDbContext();
        salesOrderModel.SOId = await GenerateNextSOId(db);

        await Task.WhenAll(LoadCustomers(), LoadProducts());
        ResetNewItem();
        isFormVisible = true;
        errorMessage = null;
    }

    private void ResetNewItem()
    {
        selectedProductId = null;
        newItem = new MyBlazorServerApp.Models.SalesOrderItem
        {
            TaxMode = "Line Exclusive"
        };
        UpdateLineTotal();
    }

    private void BackToList()
    {
        isFormVisible = false;
        editingSalesOrder = null;
        errorMessage = null;
        ApplyFilter();
    }

    private void OnProductSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e?.Value?.ToString(), out int id))
        {
            selectedProductId = id;
            var prod = products.FirstOrDefault(p => p.Id == id);
            if (prod != null)
            {
                newItem.ProductName = prod.Name;
                newItem.Rate = prod.RetailRate;
                newItem.GSTPercent = prod.GstPercentage ?? 0m;
                selectedCategory = prod.ProductGroup?.Name ?? "Uncategorized";
            }
        }
        else
        {
            selectedProductId = null;
            selectedCategory = null;
            ResetNewItem();
        }
        UpdateLineTotal();
    }

    private async Task SaveSalesOrder()
    {
        try
        {
            errorMessage = null;
            using var db = DbFactory.CreateDbContext();

            if (editingSalesOrder == null && string.IsNullOrWhiteSpace(salesOrderModel.SOId))
                salesOrderModel.SOId = await GenerateNextSOId(db);

            if (salesOrderModel.CustomerId == null || salesOrderModel.CustomerId == 0)
            {
                errorMessage = "Please select a customer.";
                return;
            }

            var selectedCustomer = await db.Customers.FindAsync(salesOrderModel.CustomerId);
            if (selectedCustomer == null)
            {
                errorMessage = "Invalid customer.";
                return;
            }
            salesOrderModel.CustomerName = selectedCustomer.Name;

            if (salesOrderModel.Items == null || !salesOrderModel.Items.Any())
            {
                errorMessage = "At least one item is required.";
                return;
            }

            if (salesOrderModel.Items.Any(i => i.Quantity <= 0 || i.Rate <= 0 || string.IsNullOrEmpty(i.ProductName) || string.IsNullOrEmpty(i.Category)))
            {
                errorMessage = "All items must have valid Product, Category, Quantity, and Rate.";
                return;
            }

            var strategy = db.Database.CreateExecutionStrategy();
            await strategy.ExecuteAsync(async () =>
            {
                using var tx = await db.Database.BeginTransactionAsync();
                try
                {
                    if (editingSalesOrder == null)
                    {
                        db.SalesOrders.Add(salesOrderModel);
                    }
                    else
                    {
                        var existing = await db.SalesOrders
                            .Include(so => so.Items)
                            .FirstOrDefaultAsync(so => so.Id == editingSalesOrder.Id);

                        if (existing == null) throw new Exception("Sales order not found.");

                        existing.SOId = salesOrderModel.SOId;
                        existing.CustomerName = salesOrderModel.CustomerName;
                        existing.CustomerId = salesOrderModel.CustomerId;
                        existing.OrderDate = salesOrderModel.OrderDate;
                        existing.ExpectedDelivery = salesOrderModel.ExpectedDelivery;
                        existing.TotalAmount = salesOrderModel.TotalAmount;
                        existing.Status = salesOrderModel.Status;
                        existing.Remarks = salesOrderModel.Remarks;

                        existing.Items?.Clear();
                        foreach (var itm in salesOrderModel.Items)
                        {
                            existing.Items ??= new List<MyBlazorServerApp.Models.SalesOrderItem>();
                            existing.Items.Add(new MyBlazorServerApp.Models.SalesOrderItem
                            {
                                ProductId = itm.ProductId,
                                ProductName = itm.ProductName,
                                Category = itm.Category,
                                Quantity = itm.Quantity,
                                Rate = itm.Rate,
                                DiscountPercent = itm.DiscountPercent,
                                GSTPercent = itm.GSTPercent,
                                TaxMode = itm.TaxMode,
                                LineTotal = itm.LineTotal
                            });
                        }
                        db.SalesOrders.Update(existing);
                    }

                    await db.SaveChangesAsync();
                    await tx.CommitAsync();

                    ResetNewItem();
                    isFormVisible = false;
                    await LoadSalesOrders();
                    ApplyFilter();
                    errorMessage = "Sales order saved successfully.";
                }
                catch (Exception ex)
                {
                    await tx.RollbackAsync();
                    errorMessage = $"Error: {ex.Message}";
                }
            });
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        StateHasChanged();
    }

    private void EditSalesOrder(MyBlazorServerApp.Models.SalesOrder so)
    {
        editingSalesOrder = so;
        salesOrderModel = new MyBlazorServerApp.Models.SalesOrder
        {
            Id = so.Id,
            SOId = so.SOId,
            CustomerName = so.Customer?.Name ?? so.CustomerName,
            CustomerId = so.CustomerId,
            OrderDate = so.OrderDate,
            ExpectedDelivery = so.ExpectedDelivery,
            TotalAmount = so.TotalAmount,
            Status = so.Status,
            Remarks = so.Remarks,
            Items = so.Items?.Select(i => new MyBlazorServerApp.Models.SalesOrderItem
            {
                Id = i.Id,
                ProductId = i.ProductId,
                ProductName = i.ProductName,
                Category = i.Category,
                Quantity = i.Quantity,
                Rate = i.Rate,
                DiscountPercent = i.DiscountPercent,
                GSTPercent = i.GSTPercent,
                TaxMode = i.TaxMode,
                LineTotal = i.LineTotal
            }).ToList() ?? new List<MyBlazorServerApp.Models.SalesOrderItem>()
        };
        ResetNewItem();
        isFormVisible = true;
        errorMessage = null;
    }

    private async Task DeleteSalesOrder(MyBlazorServerApp.Models.SalesOrder so)
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            var existing = await db.SalesOrders.Include(s => s.Items).FirstOrDefaultAsync(s => s.Id == so.Id);
            if (existing != null)
            {
                db.SalesOrders.Remove(existing);
                await db.SaveChangesAsync();
                await LoadSalesOrders();
                ApplyFilter();
                errorMessage = "Deleted successfully.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Delete failed: {ex.Message}";
        }
        StateHasChanged();
    }

    private void PrintSalesOrder(MyBlazorServerApp.Models.SalesOrder so)
        => NavigationManager.NavigateTo($"/salesorder/print/{so.Id}");

    private void ApplyFilter()
    {
        filteredSalesOrders = salesOrders
            .Where(so => string.IsNullOrEmpty(searchText) ||
                         (so.SOId?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                         (so.Customer?.Name?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                         (so.CustomerName?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false))
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? string.Empty;
        currentPage = 1;
        ApplyFilter();
    }

    private void AddItem()
    {
        if (!selectedProductId.HasValue || newItem.Quantity <= 0 || newItem.Rate <= 0 || string.IsNullOrEmpty(selectedCategory))
        {
            errorMessage = "Product, Category, Quantity, and Rate are required.";
            return;
        }

        var prod = products.First(p => p.Id == selectedProductId.Value);
        newItem.LineTotal = CalculateLineTotal(newItem);

        salesOrderModel.Items ??= new List<MyBlazorServerApp.Models.SalesOrderItem>();
        salesOrderModel.Items.Add(new MyBlazorServerApp.Models.SalesOrderItem
        {
            ProductId = selectedProductId.Value.ToString(),
            ProductName = prod.Name,
            Category = selectedCategory,
            Quantity = newItem.Quantity,
            Rate = newItem.Rate,
            DiscountPercent = newItem.DiscountPercent,
            GSTPercent = newItem.GSTPercent,
            TaxMode = newItem.TaxMode,
            LineTotal = newItem.LineTotal
        });

        ResetNewItem();
        UpdateTotalAmount();
        errorMessage = null;
    }

    private void RemoveItem(MyBlazorServerApp.Models.SalesOrderItem item)
    {
        salesOrderModel.Items?.Remove(item);
        UpdateTotalAmount();
    }

    private decimal CalculateLineTotal(MyBlazorServerApp.Models.SalesOrderItem item)
    {
        if (item.Quantity <= 0 || item.Rate <= 0) return 0m;
        decimal baseAmt = item.Quantity * item.Rate;
        decimal disc = baseAmt * item.DiscountPercent / 100m;
        decimal taxable = baseAmt - disc;

        if (item.TaxMode == "Line Inclusive" && item.GSTPercent > 0)
            return Math.Round(taxable / (1m + item.GSTPercent / 100m), 2);

        if (item.GSTPercent > 0)
            return Math.Round(taxable + taxable * item.GSTPercent / 100m, 2);

        return Math.Round(taxable, 2);
    }

    private void UpdateTotalAmount()
    {
        salesOrderModel.TotalAmount = salesOrderModel.Items?.Sum(i => i.LineTotal) ?? 0m;
    }

    private void OnTaxModeChange(ChangeEventArgs e)
    {
        newItem.TaxMode = e.Value?.ToString() ?? "Line Exclusive";
        UpdateLineTotal();
    }

    private void UpdateLineTotal()
    {
        newItem.LineTotal = CalculateLineTotal(newItem);
        StateHasChanged();
    }
}
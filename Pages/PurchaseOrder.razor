@page "/purchaseorder"
@using MyBlazorServerApp.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AppDbContext> DbFactory
@inject NavigationManager NavigationManager
<div class="main-card">
    <div class="header-container" style="@(isFormVisible ? "display: none;" : "")">
        <h3 class="page-title">Purchase Order List</h3>
        <p class="subtitle">Manage all your purchase orders</p>
        <div class="action-container">
            <div class="search-bar">
                <InputText class="form-control" @bind-Value="searchText" placeholder="Search by PO ID or Supplier..." @oninput="OnSearchInput" />
            </div>
            <button class="btn btn-primary" @onclick="ApplyFilter">Search</button>
            <button class="btn btn-primary" @onclick="ShowAddForm">Add New PO</button>
        </div>
    </div>
    @* FORM / ADD *@
    @if (isFormVisible)
    {
        <div class="form-container">
            <h3 class="page-title">Create New Purchase Order</h3>
            <div class="add-card">
                <div class="form-header">
                    <button class="btn btn-secondary" @onclick="BackToList">View All POs</button>
                </div>
                <div class="inner-box">
                    <EditForm Model="purchaseOrderModel" OnValidSubmit="SavePurchaseOrder">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }
                        <h4 class="section-title">Purchase Order Header</h4>
                        <div class="grid-three">
                            <div class="form-item">
                                <label class="form-label">PO ID</label>
                                <InputText class="form-control" @bind-Value="purchaseOrderModel.POId" />
                            </div>
                            <div class="form-item">
                                <label class="form-label">Supplier</label>
                                <InputText class="form-control" @bind-Value="purchaseOrderModel.SupplierName" />
                            </div>
                            <div class="form-item">
                                <label class="form-label">Order Date</label>
                                <InputDate class="form-control" @bind-Value="purchaseOrderModel.OrderDate" />
                            </div>
                        </div>
                        <div class="grid-three">
                            <div class="form-item">
                                <label class="form-label">Expected Delivery Date</label>
                                <InputDate class="form-control" @bind-Value="purchaseOrderModel.ExpectedDelivery" />
                            </div>
                            <div class="form-item">
                                <label class="form-label">Status</label>
                                <InputSelect class="form-control" @bind-Value="purchaseOrderModel.Status">
                                    <option value="">Select Status</option>
                                    <option>Pending</option>
                                    <option>Completed</option>
                                    <option>Cancelled</option>
                                </InputSelect>
                            </div>
                            <div class="form-item">
                                <label class="form-label">Remarks</label>
                                <InputTextArea class="form-control" @bind-Value="purchaseOrderModel.Remarks" />
                            </div>
                        </div>
                        <h4 class="section-title">Purchase Order Items</h4>
                        <div class="grid-three">
                            <div class="form-item">
                                <label class="form-label">Category</label>
                                <InputText class="form-control" @bind-Value="newItem.Category" />
                            </div>
                            <div class="form-item">
                                <label class="form-label">Product</label>
                                <InputText class="form-control" @bind-Value="newItem.ProductName" />
                            </div>
                            <div class="form-item">
                                <label class="form-label">Quantity</label>
                                <InputNumber class="form-control" @bind-Value="newItem.Quantity" />
                            </div>
                        </div>
                        <div class="grid-three">
                            <div class="form-item">
                                <label class="form-label">Rate</label>
                                <InputNumber class="form-control" @bind-Value="newItem.Rate" />
                            </div>
                            <div class="form-item">
                                <label class="form-label">Disc %</label>
                                <InputNumber class="form-control" @bind-Value="newItem.DiscountPercent" />
                            </div>
                            <div class="form-item">
                                <label class="form-label">GST %</label>
                                <InputNumber class="form-control" @bind-Value="newItem.GSTPercent" />
                            </div>
                        </div>
                        <div class="grid-two">
                            <div class="form-item">
                                <label class="form-label">Line Total (incl. GST)</label>
                                <InputNumber class="form-control" @bind-Value="newItem.LineTotal" readonly />
                            </div>
                            <div class="form-item">
                                <label class="form-label">Tax Calculation Mode</label>
                                <div class="radio-group">
                                    <label>
                                        <input type="radio" name="taxMode" value="Line Exclusive" checked="@(newItem.TaxMode == "Line Exclusive")" @onchange="OnTaxModeChange" class="radio-input" />
                                        Exclusive
                                    </label>
                                    <label>
                                        <input type="radio" name="taxMode" value="Line Inclusive" checked="@(newItem.TaxMode == "Line Inclusive")" @onchange="OnTaxModeChange" class="radio-input" />
                                        Inclusive
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="form-actions full-width">
                            <button type="button" class="btn btn-primary" @onclick="AddItem">Add Item</button>
                        </div>
                        <div class="items-table">
                            <table class="table table-custom">
                                <thead>
                                    <tr>
                                        <th>Product ID</th>
                                        <th>Product Name</th>
                                        <th>Quantity</th>
                                        <th>Rate</th>
                                        <th>Disc %</th>
                                        <th>GST %</th>
                                        <th>Line Total</th>
                                        <th>Tax Mode</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in purchaseOrderModel.Items)
                                    {
                                        <tr>
                                            <td>@item.ProductId</td>
                                            <td>@item.ProductName</td>
                                            <td>@item.Quantity</td>
                                            <td>@(item.Rate.HasValue? item.Rate.Value.ToString("C") : "N/A")</td>
                                            <td>@(item.DiscountPercent.HasValue? item.DiscountPercent.Value.ToString("F2") : "N/A")</td>
                                            <td>@(item.GSTPercent.HasValue? item.GSTPercent.Value.ToString("F2") : "N/A")</td>
                                            <td>@(item.LineTotal.HasValue? item.LineTotal.Value.ToString("C") : "N/A")</td>
                                            <td>@item.TaxMode</td>
                                            <td>
                                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveItem(item)"><i class="oi oi-trash"></i></button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="summary">
                            <div class="form-item">
                                <label class="form-label">Grand Total (incl. GST)</label>
                                <InputNumber class="form-control" @bind-Value="purchaseOrderModel.TotalAmount" readonly />
                            </div>
                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary">
                                    Save Purchase Order
                                </button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }
    @* LIST VIEW *@
    @if (!isFormVisible)
    {
        <div class="product-table-box">
            <table class="table table-custom">
                <thead>
                    <tr>
                        <th>PO ID</th>
                        <th>Supplier Name</th>
                        <th>Order Date</th>
                        <th>Expected Delivery</th>
                        <th>Total Amount</th>
                        <th>Status</th>
                        <th style="width:180px;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredPurchaseOrders.Count == 0)
                    {
                        <tr><td colspan="7" class="text-center">No purchase orders found.</td></tr>
                    }
                    else
                    {
                        @foreach (var po in filteredPurchaseOrders)
                        {
                            <tr>
                                <td>@po.POId</td>
                                <td>@po.SupplierName</td>
                                <td>@(po.OrderDate.HasValue? po.OrderDate.Value.ToShortDateString() : "N/A")</td>
                                <td>@(po.ExpectedDelivery.HasValue? po.ExpectedDelivery.Value.ToShortDateString() : "N/A")</td>
                                <td>@(po.TotalAmount.HasValue? po.TotalAmount.Value.ToString("C") : "N/A")</td>
                                <td>@po.Status</td>
                                <td>
                                    <button class="btn btn-warning btn-sm me-1" @onclick="() => EditPurchaseOrder(po)"><i class="oi oi-pencil"></i></button>
                                    <button class="btn btn-danger btn-sm me-1" @onclick="() => DeletePurchaseOrder(po)"><i class="oi oi-trash"></i></button>
                                    <button class="btn btn-info btn-sm" @onclick="() => PrintPurchaseOrder(po.Id)">
                                        <i class="oi oi-print"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }
</div>
@code {
    // Use fully-qualified model type to avoid naming conflicts with page class
    private List<MyBlazorServerApp.Models.PurchaseOrder> purchaseOrders = new();
    private List<MyBlazorServerApp.Models.PurchaseOrder> filteredPurchaseOrders = new();
    private MyBlazorServerApp.Models.PurchaseOrder purchaseOrderModel = new();
    private MyBlazorServerApp.Models.PurchaseOrder? editingPurchaseOrder;
    private bool isFormVisible = false;
    private string searchText = string.Empty;
    private int currentPage = 1;
    private int pageSize = 5;
    private string? errorMessage;
    private MyBlazorServerApp.Models.PurchaseOrderItem newItem = new();
    protected override async Task OnInitializedAsync()
    {
        await LoadPurchaseOrders();
        ApplyFilter();
    }
    private async Task LoadPurchaseOrders()
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            purchaseOrders = await db.PurchaseOrders.Include(p => p.Items).ToListAsync();
            filteredPurchaseOrders = purchaseOrders.ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading purchase orders: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }
    private void ShowAddForm()
    {
        editingPurchaseOrder = null;
        purchaseOrderModel = new MyBlazorServerApp.Models.PurchaseOrder { Items = new List<MyBlazorServerApp.Models.PurchaseOrderItem>() };
        newItem = new MyBlazorServerApp.Models.PurchaseOrderItem();
        isFormVisible = true;
        errorMessage = null;
    }
    private void BackToList()
    {
        isFormVisible = false;
        editingPurchaseOrder = null;
        errorMessage = null;
    }
    private async Task SavePurchaseOrder()
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            if (editingPurchaseOrder == null)
            {
                db.PurchaseOrders.Add(purchaseOrderModel);
            }
            else
            {
                var existingPO = await db.PurchaseOrders.Include(p => p.Items).FirstOrDefaultAsync(p => p.Id == editingPurchaseOrder.Id);
                if (existingPO != null)
                {
                    existingPO.POId = purchaseOrderModel.POId;
                    existingPO.SupplierName = purchaseOrderModel.SupplierName;
                    existingPO.OrderDate = purchaseOrderModel.OrderDate;
                    existingPO.ExpectedDelivery = purchaseOrderModel.ExpectedDelivery;
                    existingPO.TotalAmount = purchaseOrderModel.TotalAmount;
                    existingPO.Status = purchaseOrderModel.Status;
                    existingPO.Remarks = purchaseOrderModel.Remarks;
                    existingPO.Items = purchaseOrderModel.Items;
                }
            }
            await db.SaveChangesAsync();
            isFormVisible = false;
            await LoadPurchaseOrders();
            ApplyFilter();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving purchase order: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }
    private void EditPurchaseOrder(MyBlazorServerApp.Models.PurchaseOrder po)
    {
        editingPurchaseOrder = po;
        purchaseOrderModel = new MyBlazorServerApp.Models.PurchaseOrder
        {
            Id = po.Id,
            POId = po.POId,
            SupplierName = po.SupplierName,
            OrderDate = po.OrderDate,
            ExpectedDelivery = po.ExpectedDelivery,
            TotalAmount = po.TotalAmount,
            Status = po.Status,
            Remarks = po.Remarks,
            Items = po.Items?.ToList() ?? new()
        };
        newItem = new MyBlazorServerApp.Models.PurchaseOrderItem();
        isFormVisible = true;
        errorMessage = null;
    }
    private async Task DeletePurchaseOrder(MyBlazorServerApp.Models.PurchaseOrder po)
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            var existingPO = await db.PurchaseOrders.Include(p => p.Items).FirstOrDefaultAsync(p => p.Id == po.Id);
            if (existingPO != null)
            {
                db.PurchaseOrders.Remove(existingPO);
                await db.SaveChangesAsync();
                await LoadPurchaseOrders();
                ApplyFilter();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting purchase order: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }
    private async Task PrintPurchaseOrder(int id)
    {
        NavigationManager.NavigateTo($"/purchaseorder/print/{id}");
        // Note: The printCustom JS function should handle the print action on the target page
    }
    private void ApplyFilter()
    {
        filteredPurchaseOrders = purchaseOrders
            .Where(po => string.IsNullOrEmpty(searchText) || po.POId.Contains(searchText, StringComparison.OrdinalIgnoreCase) || po.SupplierName.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }
    private void OnSearchInput(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? string.Empty;
        currentPage = 1;
        ApplyFilter();
    }
    private void AddItem()
    {
        if (purchaseOrderModel.Items == null) purchaseOrderModel.Items = new List<MyBlazorServerApp.Models.PurchaseOrderItem>();
        newItem.LineTotal = CalculateLineTotal(newItem);
        purchaseOrderModel.Items.Add(new MyBlazorServerApp.Models.PurchaseOrderItem
        {
            ProductId = Guid.NewGuid().ToString(),
            ProductName = newItem.ProductName,
            Category = newItem.Category,
            Quantity = newItem.Quantity ?? 0,
            Rate = newItem.Rate ?? 0,
            DiscountPercent = newItem.DiscountPercent ?? 0,
            GSTPercent = newItem.GSTPercent ?? 0,
            TaxMode = newItem.TaxMode,
            LineTotal = newItem.LineTotal
        });
        newItem = new MyBlazorServerApp.Models.PurchaseOrderItem();
        UpdateTotalAmount();
    }
    private void RemoveItem(MyBlazorServerApp.Models.PurchaseOrderItem item)
    {
        purchaseOrderModel.Items?.Remove(item);
        UpdateTotalAmount();
    }
    private decimal CalculateLineTotal(MyBlazorServerApp.Models.PurchaseOrderItem item)
    {
        if (item.Quantity == null || item.Rate == null) return 0;
        decimal baseAmount = (decimal)item.Quantity * (decimal)item.Rate;
        decimal discount = baseAmount * (decimal)(item.DiscountPercent ?? 0) / 100m;
        decimal taxableAmount = baseAmount - discount;
        if (item.TaxMode == "Line Inclusive")
        {
            return taxableAmount;
        }
        else
        {
            decimal gst = taxableAmount * (decimal)(item.GSTPercent ?? 0) / 100m;
            return taxableAmount + gst;
        }
    }
    private void UpdateTotalAmount()
    {
        purchaseOrderModel.TotalAmount = purchaseOrderModel.Items?.Sum(i => i.LineTotal ?? 0) ?? 0;
    }
    private void OnTaxModeChange(ChangeEventArgs e)
    {
        newItem.TaxMode = e.Value?.ToString();
        UpdateLineTotal();
    }
    private void UpdateLineTotal()
    {
        newItem.LineTotal = CalculateLineTotal(newItem);
    }
}

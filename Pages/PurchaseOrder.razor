@page "/purchaseorder"
@using MyBlazorServerApp.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.JSInterop
@inject IDbContextFactory<AppDbContext> DbFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="main-card">
    <div class="header-container" style="@(isFormVisible ? "display: none;" : "")">
        <h3 class="page-title">Purchase Order List</h3>
        <p class="subtitle">Manage all your purchase orders</p>
        <div class="action-container">
            <div class="search-bar">
                <InputText class="form-control" @bind-Value="searchText" placeholder="Search by PO ID or Supplier..." @oninput="OnSearchInput" />
            </div>
            <button class="btn btn-primary" @onclick="ApplyFilter">Search</button>
            <button class="btn btn-primary" @onclick="ShowAddForm">Add New PO</button>
        </div>
    </div>
    @if (isFormVisible)
    {
        <div class="form-container">
            <h3 class="page-title">Create New Purchase Order</h3>
            <div class="add-card">
                <div class="form-header">
                    <button class="btn btn-secondary" @onclick="BackToList">View All POs</button>
                </div>
                <div class="inner-box">
                    <EditForm Model="purchaseOrderModel" OnValidSubmit="SavePurchaseOrder">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }
                        <h4 class="section-title">Purchase Order Header</h4>
                        <div class="grid-three">
                            <div class="form-item">
                                <label class="form-label">PO ID</label>
                                <InputText class="form-control" @bind-Value="purchaseOrderModel.POId" />
                            </div>
                            <div class="form-item">
                                <label class="form-label">Supplier</label>
                                <InputText class="form-control" @bind-Value="purchaseOrderModel.SupplierName" />
                            </div>
                            <div class="form-item">
                                <label class="form-label">Order Date</label>
                                <InputDate class="form-control" @bind-Value="purchaseOrderModel.OrderDate" />
                            </div>
                        </div>
                        <div class="grid-three">
                            <div class="form-item">
                                <label class="form-label">Expected Delivery Date</label>
                                <InputDate class="form-control" @bind-Value="purchaseOrderModel.ExpectedDelivery" />
                            </div>
                            <div class="form-item">
                                <label class="form-label">Status</label>
                                <InputSelect class="form-control" @bind-Value="purchaseOrderModel.Status">
                                    <option value="">Select Status</option>
                                    <option>Pending</option>
                                    <option>Completed</option>
                                    <option>Cancelled</option>
                                </InputSelect>
                            </div>
                            <div class="form-item">
                                <label class="form-label">Remarks</label>
                                <InputTextArea class="form-control" @bind-Value="purchaseOrderModel.Remarks" />
                            </div>
                        </div>
                        <h4 class="section-title">Purchase Order Items</h4>
                        <div class="grid-three">
                            <div class="form-item">
                                <label class="form-label">Category</label>
                                <InputText class="form-control" @bind-Value="newItem.Category" />
                            </div>
                            <div class="form-item">
                                <label class="form-label">Product</label>
                                <InputText class="form-control" @bind-Value="newItem.ProductName" />
                            </div>
                            <div class="form-item">
                                <label class="form-label">Quantity</label>
                                <InputNumber class="form-control" @bind-Value="newItem.Quantity" />
                            </div>
                        </div>
                        <div class="grid-three">
                            <div class="form-item">
                                <label class="form-label">Rate</label>
                                <InputNumber class="form-control" @bind-Value="newItem.Rate" />
                            </div>
                            <div class="form-item">
                                <label class="form-label">Disc %</label>
                                <InputNumber class="form-control" @bind-Value="newItem.DiscountPercent" />
                            </div>
                            <div class="form-item">
                                <label class="form-label">GST %</label>
                                <InputNumber class="form-control" @bind-Value="newItem.GSTPercent" />
                            </div>
                        </div>
                        <div class="grid-two">
                            <div class="form-item">
                                <label class="form-label">Line Total (incl. GST)</label>
                                <InputNumber class="form-control" @bind-Value="newItem.LineTotal" readonly />
                            </div>
                            <div class="form-item">
                                <label class="form-label">Tax Calculation Mode</label>
                                <div class="radio-group">
                                    <label>
                                        <input type="radio" name="taxMode" value="Line Exclusive" checked="@(newItem.TaxMode == "Line Exclusive")" @onchange="OnTaxModeChange" class="radio-input" />
                                        Exclusive
                                    </label>
                                    <label>
                                        <input type="radio" name="taxMode" value="Line Inclusive" checked="@(newItem.TaxMode == "Line Inclusive")" @onchange="OnTaxModeChange" class="radio-input" />
                                        Inclusive
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="form-actions full-width">
                            <button type="button" class="btn btn-primary" @onclick="AddItem">Add Item</button>
                        </div>
                        <div class="items-table">
                            <table class="table table-custom">
                                <thead>
                                    <tr>
                                        <th style="background-color: #1e3a8a; color: white;">Product ID</th>
                                        <th style="background-color: #1e3a8a; color: white;">Product Name</th>
                                        <th style="background-color: #1e3a8a; color: white;">Quantity</th>
                                        <th style="background-color: #1e3a8a; color: white;">Rate</th>
                                        <th style="background-color: #1e3a8a; color: white;">Disc %</th>
                                        <th style="background-color: #1e3a8a; color: white;">GST %</th>
                                        <th style="background-color: #1e3a8a; color: white;">Line Total</th>
                                        <th style="background-color: #1e3a8a; color: white;">Tax Mode</th>
                                        <th style="background-color: #1e3a8a; color: white;">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in purchaseOrderModel.Items)
                                    {
                                        <tr>
                                            <td>@item.ProductId</td>
                                            <td>@item.ProductName</td>
                                            <td>@item.Quantity</td>
                                            <td>@item.Rate</td>
                                            <td>@item.DiscountPercent</td>
                                            <td>@item.GSTPercent</td>
                                            <td>@item.LineTotal</td>
                                            <td>@item.TaxMode</td>
                                            <td>
                                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveItem(item)"><i class="oi oi-trash"></i></button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="summary">
                            <div class="form-item">
                                <label class="form-label">Grand Total (incl. GST)</label>
                                <InputNumber class="form-control" @bind-Value="purchaseOrderModel.TotalAmount" readonly />
                            </div>
                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary" style="background-color:#1e3a8a;color:white;">
                                    Save Purchase Order
                                </button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }
    @if (!isFormVisible)
    {
        <div class="product-table-box">
            <table class="table table-custom">
                <thead>
                    <tr>
                        <th style="background-color: #1e3a8a; color: white;">PO ID</th>
                        <th style="background-color: #1e3a8a; color: white;">SUPPLIER NAME</th>
                        <th style="background-color: #1e3a8a; color: white;">ORDER DATE</th>
                        <th style="background-color: #1e3a8a; color: white;">EXPECTED DELIVERY</th>
                        <th style="background-color: #1e3a8a; color: white;">TOTAL AMOUNT</th>
                        <th style="background-color: #1e3a8a; color: white;">STATUS</th>
                        <th style="background-color: #1e3a8a; color: white; width:180px;">ACTIONS</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredPurchaseOrders.Count == 0)
                    {
                        <tr><td colspan="7" class="text-center">No purchase orders found.</td></tr>
                    }
                    else
                    {
                        @foreach (var po in filteredPurchaseOrders)
                        {
                            <tr>
                                <td>@po.POId</td>
                                <td>@po.SupplierName</td>
                                <td>@po.OrderDate.ToShortDateString()</td>
                                <td>@po.ExpectedDelivery.ToShortDateString()</td>
                                <td>@po.TotalAmount.ToString("C")</td>
                                <td>@po.Status</td>
                                <td>
                                    <button class="btn btn-warning btn-sm me-1" @onclick="() => EditPurchaseOrder(po)"><i class="oi oi-pencil"></i></button>
                                    <button class="btn btn-danger btn-sm me-1" @onclick="() => DeletePurchaseOrder(po)"><i class="oi oi-trash"></i></button>
                                    <button class="btn btn-info btn-sm" @onclick="() => PrintPurchaseOrder(po)"><i class="oi oi-print"></i></button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            @if (filteredPurchaseOrders.Count > 0)
            {
                <div class="pagination-info" style="text-align: right; padding: 10px; color: #1d3557; font-size: 14px;">
                    @($"Showing {((currentPage - 1) * pageSize + 1)}-{Math.Min(currentPage * pageSize, purchaseOrders.Count)} of {purchaseOrders.Count} purchase orders")
                </div>
            }
        </div>
    }
</div>

@code {
    private List<MyBlazorServerApp.Models.PurchaseOrder> purchaseOrders = new();
    private List<MyBlazorServerApp.Models.PurchaseOrder> filteredPurchaseOrders = new();
    private MyBlazorServerApp.Models.PurchaseOrder purchaseOrderModel = new();
    private MyBlazorServerApp.Models.PurchaseOrder? editingPurchaseOrder;
    private bool isFormVisible = false;
    private string searchText = string.Empty;
    private int currentPage = 1;
    private int pageSize = 5;
    private string? errorMessage;
    private MyBlazorServerApp.Models.PurchaseOrderItem newItem = new MyBlazorServerApp.Models.PurchaseOrderItem();

    protected override async Task OnInitializedAsync()
    {
        await LoadPurchaseOrders();
        ApplyFilter();
    }

    private async Task LoadPurchaseOrders()
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            if (db != null)
            {
                purchaseOrders = await db.PurchaseOrders.Include(p => p.Items).ToListAsync() ?? new List<MyBlazorServerApp.Models.PurchaseOrder>();
                filteredPurchaseOrders = purchaseOrders.ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading purchase orders: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private void ShowAddForm()
    {
        editingPurchaseOrder = null;
        purchaseOrderModel = new MyBlazorServerApp.Models.PurchaseOrder { Items = new List<MyBlazorServerApp.Models.PurchaseOrderItem>() };
        newItem = new MyBlazorServerApp.Models.PurchaseOrderItem();
        isFormVisible = true;
        errorMessage = null;
    }

    private void BackToList()
    {
        isFormVisible = false;
        editingPurchaseOrder = null;
        errorMessage = null;
    }

    private async Task SavePurchaseOrder()
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            if (db != null)
            {
                if (string.IsNullOrEmpty(purchaseOrderModel.POId) || string.IsNullOrEmpty(purchaseOrderModel.SupplierName))
                {
                    errorMessage = "PO ID and Supplier Name are required.";
                    return;
                }

                if (editingPurchaseOrder == null)
                {
                    if (await db.PurchaseOrders.AnyAsync(po => po.POId == purchaseOrderModel.POId))
                    {
                        errorMessage = "A purchase order with this PO ID already exists.";
                        return;
                    }
                    db.PurchaseOrders.Add(purchaseOrderModel);
                }
                else
                {
                    var existingPO = await db.PurchaseOrders.Include(p => p.Items).FirstOrDefaultAsync(p => p.Id == editingPurchaseOrder.Id);
                    if (existingPO != null)
                    {
                        existingPO.POId = purchaseOrderModel.POId;
                        existingPO.SupplierName = purchaseOrderModel.SupplierName;
                        existingPO.OrderDate = purchaseOrderModel.OrderDate;
                        existingPO.ExpectedDelivery = purchaseOrderModel.ExpectedDelivery;
                        existingPO.TotalAmount = purchaseOrderModel.TotalAmount;
                        existingPO.Status = purchaseOrderModel.Status;
                        existingPO.Remarks = purchaseOrderModel.Remarks;
                        if (purchaseOrderModel.Items != null)
                        {
                            existingPO.Items = purchaseOrderModel.Items;
                            foreach (var item in existingPO.Items)
                            {
                                db.Entry(item).State = EntityState.Modified;
                            }
                        }
                        db.PurchaseOrders.Update(existingPO);
                    }
                }
                await db.SaveChangesAsync();
                isFormVisible = false;
                await LoadPurchaseOrders();
                ApplyFilter();
                errorMessage = null;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving purchase order: {ex.Message} - Inner Exception: {ex.InnerException?.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private void EditPurchaseOrder(MyBlazorServerApp.Models.PurchaseOrder po)
    {
        editingPurchaseOrder = po;
        purchaseOrderModel = new MyBlazorServerApp.Models.PurchaseOrder
        {
            Id = po.Id,
            POId = po.POId,
            SupplierName = po.SupplierName,
            OrderDate = po.OrderDate,
            ExpectedDelivery = po.ExpectedDelivery,
            TotalAmount = po.TotalAmount,
            Status = po.Status,
            Remarks = po.Remarks,
            Items = po.Items != null ? po.Items.ToList() : new List<MyBlazorServerApp.Models.PurchaseOrderItem>()
        };
        newItem = new MyBlazorServerApp.Models.PurchaseOrderItem();
        isFormVisible = true;
        errorMessage = null;
    }

    private async Task DeletePurchaseOrder(MyBlazorServerApp.Models.PurchaseOrder po)
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            if (db != null)
            {
                var existingPO = await db.PurchaseOrders.Include(p => p.Items).FirstOrDefaultAsync(p => p.Id == po.Id);
                if (existingPO != null)
                {
                    db.PurchaseOrders.Remove(existingPO);
                    await db.SaveChangesAsync();
                    await LoadPurchaseOrders();
                    ApplyFilter();
                    errorMessage = null;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting purchase order: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private async Task PrintPurchaseOrder(MyBlazorServerApp.Models.PurchaseOrder po)
    {
        await JSRuntime.InvokeVoidAsync("window.print");
    }

    private void ApplyFilter()
    {
        filteredPurchaseOrders = purchaseOrders
            .Where(po => string.IsNullOrEmpty(searchText) || po.POId.Contains(searchText, StringComparison.OrdinalIgnoreCase) || po.SupplierName.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? string.Empty;
        currentPage = 1;
        ApplyFilter();
    }

    private void AddItem()
    {
        if (purchaseOrderModel.Items == null) purchaseOrderModel.Items = new List<MyBlazorServerApp.Models.PurchaseOrderItem>();
        newItem.LineTotal = CalculateLineTotal(newItem); // Recalculate LineTotal
        purchaseOrderModel.Items.Add(new MyBlazorServerApp.Models.PurchaseOrderItem
        {
            ProductId = Guid.NewGuid().ToString(),
            ProductName = newItem.ProductName,
            Category = newItem.Category,
            Quantity = newItem.Quantity ?? 0,
            Rate = newItem.Rate ?? 0,
            DiscountPercent = newItem.DiscountPercent ?? 0,
            GSTPercent = newItem.GSTPercent ?? 0,
            TaxMode = newItem.TaxMode,
            LineTotal = newItem.LineTotal
        });
        newItem = new MyBlazorServerApp.Models.PurchaseOrderItem();
        UpdateTotalAmount();
    }

    private void RemoveItem(MyBlazorServerApp.Models.PurchaseOrderItem item)
    {
        if (purchaseOrderModel.Items != null)
        {
            purchaseOrderModel.Items.Remove(item);
            UpdateTotalAmount();
        }
    }

    private decimal CalculateLineTotal(MyBlazorServerApp.Models.PurchaseOrderItem item)
    {
        if (item.Quantity == null || item.Rate == null) return 0;
        decimal baseAmount = (decimal)item.Quantity * (decimal)item.Rate;
        decimal discount = baseAmount * (decimal)(item.DiscountPercent ?? 0) / 100;
        decimal taxableAmount = baseAmount - discount;
        if (item.TaxMode == "Line Inclusive")
        {
            decimal gst = taxableAmount - (taxableAmount / (1 + (decimal)(item.GSTPercent ?? 0) / 100));
            return taxableAmount;
        }
        else
        {
            decimal gst = taxableAmount * (decimal)(item.GSTPercent ?? 0) / 100;
            return taxableAmount + gst;
        }
    }

    private void UpdateTotalAmount()
    {
        if (purchaseOrderModel.Items != null)
        {
            purchaseOrderModel.TotalAmount = purchaseOrderModel.Items.Sum(i => i.LineTotal ?? 0);
        }
    }

    private void OnTaxModeChange(ChangeEventArgs e)
    {
        newItem.TaxMode = e.Value.ToString();
        UpdateLineTotal();
    }

    private void UpdateLineTotal()
    {
        newItem.LineTotal = CalculateLineTotal(newItem);
    }
}

<style>
    .main-card {
        background: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
    }

    .header-container {
        margin-bottom: 20px;
    }

    .page-title {
        font-size: 24px;
        color: #1e3a8a;
        margin-bottom: 10px;
    }

    .subtitle {
        font-size: 16px;
        color: #1d3557;
        margin-bottom: 15px;
    }

    .action-container {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }

    .search-bar .form-control {
        width: 200px;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .btn-primary {
        background-color: #1e3a8a;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
    }

    .btn-warning {
        background-color: #ADD8E6;
        color: darkblue;
        border: none;
    }

    .btn-danger {
        background-color: #FFCCCC;
        color: darkred;
        border: none;
    }

    .btn-info {
        background-color: #00BFFF;
        color: darkblue;
        border: none;
    }

    .add-card {
        background: #e0e2ea;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 20px auto;
        max-width: 1200px;
        width: 100%;
    }

    .form-container {
        width: 100%;
    }

    .form-header {
        display: flex;
        justify-content: flex-end;
        margin-bottom: 15px;
    }

    .section-title {
        font-size: 20px;
        color: #1e3a8a;
        margin-bottom: 10px;
    }

    .grid-three {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: 12px;
        margin-bottom: 12px;
    }

    .grid-two {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 12px;
        margin-bottom: 12px;
    }

    .form-item {
        display: flex;
        flex-direction: column;
    }

    .form-actions {
        margin-top: 16px;
        text-align: right;
    }

    .full-width {
        width: 100%;
    }

    .radio-group {
        display: flex;
        gap: 20px;
    }

    .radio-input {
        margin-right: 5px;
    }

    .items-table {
        margin-top: 20px;
    }

    .table-custom {
        width: 100%;
        border-collapse: collapse;
    }

        .table-custom th {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .table-custom td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

    .summary {
        margin-top: 20px;
    }

    .pagination-info {
        margin-top: 10px;
    }
</style>
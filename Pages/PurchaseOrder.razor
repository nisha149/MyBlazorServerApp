@page "/purchaseorder"
@using MyBlazorServerApp.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.JSInterop
@inject IDbContextFactory<AppDbContext> DbFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
<div class="main-card">
    <div class="header-container">
        <h3 class="page-title">Purchase Order List</h3>
        <p class="subtitle">Manage all your purchase orders</p>
        <div class="action-container">
            <div class="search-bar">
                <InputText class="form-control" @bind-Value="searchText" placeholder="Search by PO ID or Supplier..." @oninput="OnSearchInput" />
            </div>
            <button class="btn btn-primary" @onclick="ApplyFilter">Search</button>
            <button class="btn btn-primary" @onclick="ShowAddForm">Add New PO</button>
        </div>
    </div>
    @if (isFormVisible)
    {
        <div class="add-card">
            <div class="inner-box">
                <EditForm Model="purchaseOrderModel" OnValidSubmit="SavePurchaseOrder">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" />
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }
                    <div class="grid-four">
                        <div class="form-item">
                            <label class="form-label">PO ID</label>
                            <InputText class="form-control" @bind-Value="purchaseOrderModel.POId" />
                        </div>
                        <div class="form-item">
                            <label class="form-label">Supplier Name</label>
                            <InputText class="form-control" @bind-Value="purchaseOrderModel.SupplierName" />
                        </div>
                        <div class="form-item">
                            <label class="form-label">Order Date</label>
                            <InputDate class="form-control" @bind-Value="purchaseOrderModel.OrderDate" />
                        </div>
                        <div class="form-item">
                            <label class="form-label">Expected Delivery</label>
                            <InputDate class="form-control" @bind-Value="purchaseOrderModel.ExpectedDelivery" />
                        </div>
                        <div class="form-item">
                            <label class="form-label">Total Amount</label>
                            <InputNumber class="form-control" @bind-Value="purchaseOrderModel.TotalAmount" />
                        </div>
                        <div class="form-item">
                            <label class="form-label">Status</label>
                            <InputSelect class="form-control" @bind-Value="purchaseOrderModel.Status">
                                <option value="">Select Status</option>
                                <option>Pending</option>
                                <option>Completed</option>
                                <option>Cancelled</option>
                            </InputSelect>
                        </div>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="btn btn-success" style="background-color:#1e3a8a;color:white;">
                            <i class="oi oi-pencil"></i> @(editingPurchaseOrder == null ? "Save" : "Update")
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="BackToList">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
    @if (!isFormVisible)
    {
        <div class="product-table-box">
            <table class="table table-custom">
                <thead>
                    <tr>
                        <th style="background-color: #1e3a8a; color: white;">PO ID</th>
                        <th style="background-color: #1e3a8a; color: white;">SUPPLIER NAME</th>
                        <th style="background-color: #1e3a8a; color: white;">ORDER DATE</th>
                        <th style="background-color: #1e3a8a; color: white;">EXPECTED DELIVERY</th>
                        <th style="background-color: #1e3a8a; color: white;">TOTAL AMOUNT</th>
                        <th style="background-color: #1e3a8a; color: white;">STATUS</th>
                        <th style="background-color: #1e3a8a; color: white; width:180px;">ACTIONS</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredPurchaseOrders.Count == 0)
                    {
                        <tr><td colspan="7" class="text-center">No purchase orders found.</td></tr>
                    }
                    else
                    {
                        @foreach (var po in filteredPurchaseOrders)
                        {
                            <tr>
                                <td>@po.POId</td>
                                <td>@po.SupplierName</td>
                                <td>@po.OrderDate.ToShortDateString()</td>
                                <td>@po.ExpectedDelivery.ToShortDateString()</td>
                                <td>@po.TotalAmount.ToString("C")</td>
                                <td>@po.Status</td>
                                <td>
                                    <button class="btn btn-warning btn-sm me-1" @onclick="() => EditPurchaseOrder(po)"><i class="oi oi-pencil"></i></button>
                                    <button class="btn btn-danger btn-sm me-1" @onclick="() => DeletePurchaseOrder(po)"><i class="oi oi-trash"></i></button>
                                    <button class="btn btn-info btn-sm" @onclick="() => PrintPurchaseOrder(po)"><i class="oi oi-print"></i></button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            @if (filteredPurchaseOrders.Count > 0)
            {
                <div class="pagination-info" style="text-align: right; padding: 10px; color: #1d3557; font-size: 14px;">
                    @($"Showing {((currentPage - 1) * pageSize + 1)}-{Math.Min(currentPage * pageSize, purchaseOrders.Count)} of {purchaseOrders.Count} purchase orders")
                </div>
            }
        </div>
    }
</div>
@code {
    private List<MyBlazorServerApp.Models.PurchaseOrder> purchaseOrders = new();
    private List<MyBlazorServerApp.Models.PurchaseOrder> filteredPurchaseOrders = new();
    private MyBlazorServerApp.Models.PurchaseOrder purchaseOrderModel = new();
    private MyBlazorServerApp.Models.PurchaseOrder? editingPurchaseOrder;
    private bool isFormVisible = false;
    private string searchText = string.Empty;
    private int currentPage = 1;
    private int pageSize = 5;
    private string? errorMessage;
    protected override async Task OnInitializedAsync()
    {
        await LoadPurchaseOrders();
        ApplyFilter();
    }
    private async Task LoadPurchaseOrders()
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            if (db != null)
            {
                purchaseOrders = await db.PurchaseOrders.ToListAsync() ?? new List<MyBlazorServerApp.Models.PurchaseOrder>();
                filteredPurchaseOrders = purchaseOrders.ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading purchase orders: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }
    private void ShowAddForm()
    {
        editingPurchaseOrder = null;
        purchaseOrderModel = new MyBlazorServerApp.Models.PurchaseOrder();
        isFormVisible = true;
        errorMessage = null;
    }
    private void BackToList()
    {
        isFormVisible = false;
        editingPurchaseOrder = null;
        errorMessage = null;
    }
    private async Task SavePurchaseOrder()
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            if (db != null)
            {
                if (editingPurchaseOrder == null)
                {
                    if (await db.PurchaseOrders.AnyAsync(po => po.POId == purchaseOrderModel.POId))
                    {
                        errorMessage = "A purchase order with this PO ID already exists.";
                        return;
                    }
                    db.PurchaseOrders.Add(purchaseOrderModel);
                }
                else
                {
                    var existingPO = await db.PurchaseOrders.FindAsync(editingPurchaseOrder.Id);
                    if (existingPO != null)
                    {
                        existingPO.POId = purchaseOrderModel.POId;
                        existingPO.SupplierName = purchaseOrderModel.SupplierName;
                        existingPO.OrderDate = purchaseOrderModel.OrderDate;
                        existingPO.ExpectedDelivery = purchaseOrderModel.ExpectedDelivery;
                        existingPO.TotalAmount = purchaseOrderModel.TotalAmount;
                        existingPO.Status = purchaseOrderModel.Status;
                        db.PurchaseOrders.Update(existingPO);
                    }
                }
                await db.SaveChangesAsync();
                isFormVisible = false;
                await LoadPurchaseOrders();
                ApplyFilter();
                errorMessage = null;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving purchase order: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }
    private void EditPurchaseOrder(MyBlazorServerApp.Models.PurchaseOrder po)
    {
        editingPurchaseOrder = po;
        purchaseOrderModel = new MyBlazorServerApp.Models.PurchaseOrder
        {
            Id = po.Id,
            POId = po.POId,
            SupplierName = po.SupplierName,
            OrderDate = po.OrderDate,
            ExpectedDelivery = po.ExpectedDelivery,
            TotalAmount = po.TotalAmount,
            Status = po.Status
        };
        isFormVisible = true;
        errorMessage = null;
    }
    private async Task DeletePurchaseOrder(MyBlazorServerApp.Models.PurchaseOrder po)
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            if (db != null)
            {
                var existingPO = await db.PurchaseOrders.FindAsync(po.Id);
                if (existingPO != null)
                {
                    db.PurchaseOrders.Remove(existingPO);
                    await db.SaveChangesAsync();
                    await LoadPurchaseOrders();
                    ApplyFilter();
                    errorMessage = null;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting purchase order: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }
    private async Task PrintPurchaseOrder(MyBlazorServerApp.Models.PurchaseOrder po)
    {
        await JSRuntime.InvokeVoidAsync("window.print");
    }
    private void ApplyFilter()
    {
        filteredPurchaseOrders = purchaseOrders
            .Where(po => string.IsNullOrEmpty(searchText) || po.POId.Contains(searchText, StringComparison.OrdinalIgnoreCase) || po.SupplierName.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }
    private void OnSearchInput(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? string.Empty;
        currentPage = 1;
        ApplyFilter();
    }
}
<style>
    .main-card {
        background: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
    }

    .header-container {
        margin-bottom: 20px;
    }

    .page-title {
        font-size: 24px;
        color: #1e3a8a;
        margin-bottom: 10px;
    }

    .subtitle {
        font-size: 16px;
        color: #1d3557;
        margin-bottom: 15px;
    }

    .action-container {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }

    .search-bar .form-control {
        width: 200px;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .btn-primary {
        background-color: #1e3a8a;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
    }

    .btn-warning {
        background-color: #ADD8E6;
        color: darkblue;
        border: none;
    }

    .btn-danger {
        background-color: #FFCCCC;
        color: darkred;
        border: none;
    }

    .btn-info {
        background-color: #00BFFF;
        color: darkblue;
        border: none;
    }

    .add-card {
        background: #e0e2ea;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 20px auto;
        width: 90%;
    }

    .form-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .grid-four {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 12px;
    }

    .form-item {
        display: flex;
        flex-direction: column;
    }

    .form-actions {
        margin-top: 16px;
        text-align: right;
    }

    .product-table-box {
        margin-top: 20px;
    }

    .table-custom {
        width: 100%;
        border-collapse: collapse;
    }

        .table-custom th, .table-custom td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

    .pagination-info {
        margin-top: 10px;
    }
</style>
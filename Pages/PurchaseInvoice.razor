@page "/purchaseinvoice"
@using MyBlazorServerApp.Models
@using Microsoft.EntityFrameworkCore
@using System.Globalization
@inject IDbContextFactory<AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<div class="main-card">
    <div class="header-container" style="@(isFormVisible ? "display: none;" : "")">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div>
                <h3 class="page-title">Purchase Invoice List</h3>
                <p class="subtitle">Manage all your purchase invoices</p>
            </div>
            <div class="action-container">
                <div class="search-bar">
                    <InputText class="form-control" @bind-Value="searchText" placeholder="Search by PI ID or Supplier..." @oninput="OnSearchInput" />
                </div>
                <button class="btn btn-primary" @onclick="ApplyFilter">Search</button>
                <button class="btn btn-primary" @onclick="ShowAddForm">Add New PI</button>
            </div>
        </div>
    </div>

    @if (isFormVisible)
    {
        <div class="form-container">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                <h3 class="page-title" style="color: #1e3a8a;">Create New Purchase Invoice</h3>
                <button class="btn btn-secondary" @onclick="BackToList">View All PIs</button>
            </div>
            <div class="add-card">
                <div class="inner-box">
                    <EditForm Model="purchaseInvoiceModel" OnValidSubmit="SavePurchaseInvoice">
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }

                        <div class="grid-two">
                            <div class="form-item">
                                <label class="form-label">PI ID</label>
                                <InputText class="form-control" @bind-Value="purchaseInvoiceModel.PIId" readonly />
                                @if (editingPurchaseInvoice == null)
                                {
                                    <small class="text-muted">Auto-generated (e.g., PI0001)</small>
                                }
                            </div>
                            <div class="form-item">
                                <label class="form-label">Supplier <span class="text-danger">*</span></label>
                                <InputSelect class="form-control" @bind-Value="purchaseInvoiceModel.SupplierId">
                                    <option value="0">Select Supplier</option>
                                    @foreach (var supplier in suppliers)
                                    {
                                        <option value="@supplier.Id">@supplier.Name</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="form-item">
                                <label class="form-label">Invoice Date <span class="text-danger">*</span></label>
                                <InputDate class="form-control" @bind-Value="purchaseInvoiceModel.InvoiceDate" />
                            </div>
                        </div>

                        <div class="grid-two">
                            <div class="form-item">
                                <label class="form-label">Due Date</label>
                                <InputDate class="form-control" @bind-Value="purchaseInvoiceModel.DueDate" />
                            </div>
                            <div class="form-item">
                                <label class="form-label">Status</label>
                                <InputSelect class="form-control" @bind-Value="purchaseInvoiceModel.Status">
                                    <option value="">Select Status</option>
                                    <option>Pending</option>
                                    <option>Paid</option>
                                    <option>Overdue</option>
                                </InputSelect>
                            </div>
                            <div class="form-item">
                                <label class="form-label">Remarks</label>
                                <InputTextArea class="form-control" @bind-Value="purchaseInvoiceModel.Remarks" />
                            </div>
                        </div>

                        <h4 class="section-title" style="color: #1e3a8a;">Purchase Invoice Items</h4>

                        <div class="grid-three">
                            <div class="form-item">
                                <label class="form-label">Product <span class="text-danger">*</span></label>
                                <InputSelect class="form-control" @bind-Value="selectedProductId" @onchange="OnProductSelect">
                                    <option value="">Select Product</option>
                                    @foreach (var product in FilteredProducts)
                                    {
                                        <option value="@product.Id">@product.Name</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="form-item">
                                <label class="form-label">Category</label>
                                <InputSelect class="form-control" @bind-Value="newItem.Category" @onchange="OnCategorySelect">
                                    <option value="">Select Category</option>
                                    @foreach (var cat in categories)
                                    {
                                        <option value="@cat">@cat</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="form-item">
                                <label class="form-label">Quantity <span class="text-danger">*</span></label>
                                <InputNumber class="form-control" @bind-Value="newItem.Quantity" />
                            </div>
                        </div>

                        <div class="grid-three">
                            <div class="form-item">
                                <label class="form-label">Rate <span class="text-danger">*</span></label>
                                <InputNumber class="form-control" @bind-Value="newItem.Rate" />
                            </div>
                            <div class="form-item">
                                <label class="form-label">Disc %</label>
                                <InputNumber class="form-control" @bind-Value="newItem.DiscountPercent" />
                            </div>
                            <div class="form-item">
                                <label class="form-label">GST %</label>
                                <InputNumber class="form-control" @bind-Value="newItem.GSTPercent" />
                            </div>
                        </div>

                        <div class="grid-two">
                            <div class="form-item">
                                <label class="form-label">Line Total (incl. GST)</label>
                                <div class="form-control" style="font-weight: bold; background: #f8f9fa; color: #1e3a8a;">
                                    @FormatCurrency(newItem.LineTotal ?? 0)
                                </div>
                            </div>
                            <div class="form-item">
                                <label class="form-label">Tax Calculation Mode</label>
                                <div class="radio-group">
                                    <label>
                                        <input type="radio" name="taxMode" value="Line Exclusive" checked="@(newItem.TaxMode == "Line Exclusive")" @onchange="OnTaxModeChange" class="radio-input" />
                                        Exclusive
                                    </label>
                                    <label>
                                        <input type="radio" name="taxMode" value="Line Inclusive" checked="@(newItem.TaxMode == "Line Inclusive")" @onchange="OnTaxModeChange" class="radio-input" />
                                        Inclusive
                                    </label>
                                </div>
                            </div>
                        </div>

                        <div class="form-actions full-width">
                            <button type="button" class="btn btn-primary" @onclick="AddItem">Add Item</button>
                        </div>

                        <div class="items-table">
                            <table class="table table-custom">
                                <thead class="table-header-darkblue">
                                    <tr>
                                        <th>PRODUCT ID</th>
                                        <th>PRODUCT NAME</th>
                                        <th>QUANTITY</th>
                                        <th>RATE</th>
                                        <th>DISC %</th>
                                        <th>GST %</th>
                                        <th>LINE TOTAL</th>
                                        <th>TAX MODE</th>
                                        <th>ACTIONS</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in purchaseInvoiceModel.Items)
                                    {
                                        <tr>
                                            <td>@item.ProductId</td>
                                            <td>@item.ProductName</td>
                                            <td>@item.Quantity</td>
                                            <td>@FormatCurrency(item.Rate ?? 0)</td>
                                            <td>@(item.DiscountPercent.HasValue? item.DiscountPercent.Value.ToString("F2") : "N/A")</td>
                                            <td>@(item.GSTPercent.HasValue? item.GSTPercent.Value.ToString("F2") : "N/A")</td>
                                            <td>@FormatCurrency(item.LineTotal ?? 0)</td>
                                            <td>@item.TaxMode</td>
                                            <td>
                                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveItem(item)">Delete</button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="summary">
                            <div class="form-item">
                                <label class="form-label">Grand Total (incl. GST)</label>
                                <div class="form-control" style="font-weight: bold; background: #f8f9fa; color: #1e3a8a;">
                                    @FormatCurrency(purchaseInvoiceModel.TotalAmount ?? 0)
                                </div>
                            </div>
                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary">Save Purchase Invoice</button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }

    @if (!isFormVisible)
    {
        <div class="product-table-box">
            <table class="table table-custom">
                <thead class="table-header-darkblue">
                    <tr>
                        <th>PI ID</th>
                        <th>SUPPLIER NAME</th>
                        <th>INVOICE DATE</th>
                        <th>DUE DATE</th>
                        <th>TOTAL AMOUNT</th>
                        <th>STATUS</th>
                        <th style="width:180px;">ACTIONS</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredPurchaseInvoices.Count == 0)
                    {
                        <tr><td colspan="7" class="text-center">No purchase invoices found.</td></tr>
                    }
                    else
                    {
                        @foreach (var pi in filteredPurchaseInvoices)
                        {
                            <tr>
                                <td>@pi.PIId</td>
                                <td>@pi.SupplierName</td>
                                <td>@(pi.InvoiceDate.HasValue? pi.InvoiceDate.Value.ToShortDateString() : "N/A")</td>
                                <td>@(pi.DueDate.HasValue? pi.DueDate.Value.ToShortDateString() : "N/A")</td>
                                <td>@FormatCurrency(pi.TotalAmount ?? 0)</td>
                                <td>@pi.Status</td>
                                <td class="action-buttons">
                                    <button class="btn btn-warning-soft btn-sm" @onclick="() => EditPurchaseInvoice(pi)">Edit</button>
                                    <button class="btn btn-danger-soft btn-sm" @onclick="() => DeletePurchaseInvoice(pi)">Delete</button>
                                    <button class="btn btn-info-soft btn-sm" @onclick="() => PrintPurchaseInvoice(pi.Id)">Print</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<MyBlazorServerApp.Models.PurchaseInvoice> purchaseInvoices = new();
    private List<MyBlazorServerApp.Models.PurchaseInvoice> filteredPurchaseInvoices = new();
    private MyBlazorServerApp.Models.PurchaseInvoice purchaseInvoiceModel = new();
    private MyBlazorServerApp.Models.PurchaseInvoice? editingPurchaseInvoice;
    private bool isFormVisible = false;
    private string searchText = string.Empty;
    private int currentPage = 1;
    private int pageSize = 5;
    private string? errorMessage;
    private MyBlazorServerApp.Models.PurchaseInvoiceItem newItem = new();
    private int? selectedProductId;
    private List<Product> products = new();
    private List<Supplier> suppliers = new();
    private List<string> categories = new();
    private string? selectedCategory;

    // ---- Currency Formatter ----
    private static readonly CultureInfo InCulture = new CultureInfo("en-IN");

    private string FormatCurrency(decimal value)
    {
        return value % 1 == 0 ? value.ToString("C0", InCulture) : value.ToString("C2", InCulture);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadPurchaseInvoices();
        using var db = DbFactory.CreateDbContext();

        products = await db.Products
            .Include(p => p.ProductGroup)
            .ToListAsync();

        suppliers = await db.Suppliers.ToListAsync();

        categories = await db.ProductGroups
            .OrderBy(g => g.Name)
            .Select(g => g.Name)
            .ToListAsync();

        ApplyFilter();
    }

    private async Task LoadPurchaseInvoices()
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            purchaseInvoices = await db.PurchaseInvoices.Include(p => p.Items).ToListAsync();
            filteredPurchaseInvoices = purchaseInvoices.ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading purchase invoices: {ex.Message}";
        }
    }

    private async Task ShowAddForm()
    {
        editingPurchaseInvoice = null;
        purchaseInvoiceModel = new MyBlazorServerApp.Models.PurchaseInvoice
        {
            Items = new List<MyBlazorServerApp.Models.PurchaseInvoiceItem>(),
            InvoiceDate = DateTime.Today,
            SupplierId = 0
        };

        try
        {
            using var db = DbFactory.CreateDbContext();
            purchaseInvoiceModel.PIId = await GenerateNextPIId(db);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"GenerateNextPIId failed: {ex.Message}");
            purchaseInvoiceModel.PIId = "PI0001";
        }

        ResetNewItem();
        isFormVisible = true;
        errorMessage = null;
        StateHasChanged();
    }

    private void BackToList()
    {
        isFormVisible = false;
        editingPurchaseInvoice = null;
        errorMessage = null;
        StateHasChanged();
    }

    private async Task SavePurchaseInvoice()
    {
        errorMessage = null;

        using var db = DbFactory.CreateDbContext();

        if (string.IsNullOrWhiteSpace(purchaseInvoiceModel.PIId))
        {
            try
            {
                purchaseInvoiceModel.PIId = await GenerateNextPIId(db);
            }
            catch (Exception ex)
            {
                errorMessage = $"Error generating PI ID: {ex.Message}";
                StateHasChanged();
                return;
            }
        }

        if (purchaseInvoiceModel.SupplierId <= 0)
        {
            errorMessage = "Please select a supplier.";
            StateHasChanged();
            return;
        }

        if (!purchaseInvoiceModel.InvoiceDate.HasValue)
        {
            errorMessage = "Invoice Date is required.";
            StateHasChanged();
            return;
        }

        var selectedSupplier = await db.Suppliers.FirstOrDefaultAsync(s => s.Id == purchaseInvoiceModel.SupplierId);
        if (selectedSupplier == null)
        {
            errorMessage = "Invalid supplier selected.";
            StateHasChanged();
            return;
        }
        purchaseInvoiceModel.SupplierName = selectedSupplier.Name;

        int editIdValue = editingPurchaseInvoice?.Id ?? 0;
        if (await db.PurchaseInvoices.AnyAsync(p => p.PIId == purchaseInvoiceModel.PIId && p.Id != editIdValue))
        {
            try
            {
                purchaseInvoiceModel.PIId = await GenerateNextPIId(db);
            }
            catch { }

            if (await db.PurchaseInvoices.AnyAsync(p => p.PIId == purchaseInvoiceModel.PIId && p.Id != editIdValue))
            {
                errorMessage = "A purchase invoice with this PI ID already exists. Please try again.";
                StateHasChanged();
                return;
            }
        }

        if (purchaseInvoiceModel.Items == null || !purchaseInvoiceModel.Items.Any())
        {
            errorMessage = "At least one item is required.";
            StateHasChanged();
            return;
        }

        foreach (var item in purchaseInvoiceModel.Items)
        {
            if (string.IsNullOrEmpty(item.ProductId) || !item.Quantity.HasValue || !item.Rate.HasValue)
            {
                errorMessage = "Each item must have Product, Quantity, and Rate.";
                StateHasChanged();
                return;
            }
        }

        var strategy = db.Database.CreateExecutionStrategy();
        await strategy.ExecuteAsync(async () =>
        {
            using var transaction = await db.Database.BeginTransactionAsync();
            try
            {
                if (editingPurchaseInvoice == null)
                {
                    db.PurchaseInvoices.Add(purchaseInvoiceModel);
                }
                else
                {
                    var existingPI = await db.PurchaseInvoices.Include(p => p.Items).FirstOrDefaultAsync(p => p.Id == editingPurchaseInvoice.Id);
                    if (existingPI != null)
                    {
                        existingPI.PIId = purchaseInvoiceModel.PIId;
                        existingPI.SupplierId = purchaseInvoiceModel.SupplierId;
                        existingPI.SupplierName = purchaseInvoiceModel.SupplierName;
                        existingPI.InvoiceDate = purchaseInvoiceModel.InvoiceDate;
                        existingPI.DueDate = purchaseInvoiceModel.DueDate;
                        existingPI.TotalAmount = purchaseInvoiceModel.TotalAmount;
                        existingPI.Status = purchaseInvoiceModel.Status;
                        existingPI.Remarks = purchaseInvoiceModel.Remarks;

                        db.PurchaseInvoiceItems.RemoveRange(existingPI.Items);
                        existingPI.Items = purchaseInvoiceModel.Items.Select(i => new MyBlazorServerApp.Models.PurchaseInvoiceItem
                        {
                            ProductId = i.ProductId,
                            ProductName = i.ProductName,
                            Category = i.Category,
                            Quantity = i.Quantity,
                            Rate = Math.Round(i.Rate ?? 0, 2),
                            DiscountPercent = Math.Round(i.DiscountPercent ?? 0, 2),
                            GSTPercent = Math.Round(i.GSTPercent ?? 0, 2),
                            TaxMode = i.TaxMode,
                            LineTotal = Math.Round(i.LineTotal ?? 0, 2),
                            PurchaseInvoiceId = existingPI.Id
                        }).ToList();
                    }
                }

                await db.SaveChangesAsync();

                foreach (var item in purchaseInvoiceModel.Items)
                {
                    if (int.TryParse(item.ProductId, out int productId))
                    {
                        var product = await db.Products.FirstOrDefaultAsync(p => p.Id == productId);
                        if (product != null && item.Quantity.HasValue)
                        {
                            product.StockQuantity += item.Quantity.Value;
                            db.Products.Update(product);
                            await db.SaveChangesAsync();
                        }
                    }
                }

                await transaction.CommitAsync();
            }
            catch (Exception)
            {
                await transaction.RollbackAsync();
                throw;
            }
        });

        isFormVisible = false;
        await LoadPurchaseInvoices();
        ApplyFilter();
        errorMessage = "Purchase invoice saved successfully.";
        StateHasChanged();
    }

    private void EditPurchaseInvoice(MyBlazorServerApp.Models.PurchaseInvoice pi)
    {
        editingPurchaseInvoice = pi;
        purchaseInvoiceModel = new MyBlazorServerApp.Models.PurchaseInvoice
        {
            Id = pi.Id,
            PIId = pi.PIId,
            SupplierId = pi.SupplierId,
            SupplierName = pi.SupplierName,
            InvoiceDate = pi.InvoiceDate,
            DueDate = pi.DueDate,
            TotalAmount = pi.TotalAmount,
            Status = pi.Status,
            Remarks = pi.Remarks,
            Items = pi.Items?.ToList() ?? new()
        };
        ResetNewItem();
        isFormVisible = true;
        errorMessage = null;
        StateHasChanged();
    }

    private async Task DeletePurchaseInvoice(MyBlazorServerApp.Models.PurchaseInvoice pi)
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            var existingPI = await db.PurchaseInvoices.Include(p => p.Items).FirstOrDefaultAsync(p => p.Id == pi.Id);
            if (existingPI != null)
            {
                db.PurchaseInvoices.Remove(existingPI);
                await db.SaveChangesAsync();
                await LoadPurchaseInvoices();
                ApplyFilter();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting purchase invoice: {ex.Message}";
        }
    }

    private async Task PrintPurchaseInvoice(int id)
    {
        NavigationManager.NavigateTo($"/purchaseinvoiceprint/{id}");
    }

    private void ApplyFilter()
    {
        filteredPurchaseInvoices = purchaseInvoices
            .Where(pi => string.IsNullOrEmpty(searchText) ||
                        (pi.PIId?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                        (pi.SupplierName?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false))
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? string.Empty;
        currentPage = 1;
        ApplyFilter();
    }

    private void OnProductSelect(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int productId))
        {
            var product = products.FirstOrDefault(p => p.Id == productId);
            if (product?.ProductGroup != null)
            {
                newItem.Category = product.ProductGroup.Name;
                StateHasChanged();
            }
        }
    }

    private void OnCategorySelect(ChangeEventArgs e)
    {
        selectedCategory = e.Value?.ToString();
        selectedProductId = null;
        newItem.Category = selectedCategory;
        StateHasChanged();
    }

    private IEnumerable<Product> FilteredProducts =>
        string.IsNullOrEmpty(selectedCategory)
            ? products
            : products.Where(p => p.ProductGroup?.Name == selectedCategory);

    private void AddItem()
    {
        if (purchaseInvoiceModel.Items == null)
            purchaseInvoiceModel.Items = new List<MyBlazorServerApp.Models.PurchaseInvoiceItem>();

        if (!selectedProductId.HasValue || !newItem.Quantity.HasValue || !newItem.Rate.HasValue)
        {
            errorMessage = "Product, Quantity, and Rate are required for items.";
            StateHasChanged();
            return;
        }

        var product = products.FirstOrDefault(p => p.Id == selectedProductId.Value);
        if (product == null)
        {
            errorMessage = "Selected product not found.";
            StateHasChanged();
            return;
        }

        newItem.LineTotal = CalculateLineTotal(newItem);
        var newItemCopy = new MyBlazorServerApp.Models.PurchaseInvoiceItem
        {
            ProductId = selectedProductId.Value.ToString(),
            ProductName = product.Name,
            Category = product.ProductGroup?.Name ?? "Uncategorized",
            Quantity = newItem.Quantity,
            Rate = newItem.Rate,
            DiscountPercent = newItem.DiscountPercent,
            GSTPercent = newItem.GSTPercent,
            TaxMode = newItem.TaxMode,
            LineTotal = newItem.LineTotal
        };
        purchaseInvoiceModel.Items.Add(newItemCopy);

        ResetNewItem();
        UpdateTotalAmount();
        errorMessage = null;
        StateHasChanged();
    }

    private void RemoveItem(MyBlazorServerApp.Models.PurchaseInvoiceItem item)
    {
        purchaseInvoiceModel.Items?.Remove(item);
        UpdateTotalAmount();
        StateHasChanged();
    }

    private decimal CalculateLineTotal(MyBlazorServerApp.Models.PurchaseInvoiceItem item)
    {
        if (item.Quantity == null || item.Rate == null) return 0;
        decimal baseAmount = (decimal)item.Quantity * (decimal)item.Rate;
        decimal discount = baseAmount * (decimal)(item.DiscountPercent ?? 0) / 100m;
        decimal taxableAmount = baseAmount - discount;
        return item.TaxMode == "Line Inclusive"
            ? taxableAmount
            : taxableAmount + (taxableAmount * (decimal)(item.GSTPercent ?? 0) / 100m);
    }

    private void UpdateTotalAmount()
    {
        purchaseInvoiceModel.TotalAmount = purchaseInvoiceModel.Items?.Sum(i => i.LineTotal ?? 0) ?? 0;
    }

    private void OnTaxModeChange(ChangeEventArgs e)
    {
        newItem.TaxMode = e.Value?.ToString() ?? "Line Exclusive";
        UpdateLineTotal();
    }

    private void UpdateLineTotal()
    {
        newItem.LineTotal = CalculateLineTotal(newItem);
    }

    private async Task<string> GenerateNextPIId(AppDbContext db)
    {
        var last = await db.PurchaseInvoices
            .Where(p => p.PIId != null && p.PIId.StartsWith("PI"))
            .OrderByDescending(p => p.PIId)
            .FirstOrDefaultAsync();

        if (last == null || string.IsNullOrEmpty(last.PIId))
            return "PI0001";

        var num = int.Parse(last.PIId.Replace("PI", ""));
        return $"PI{(num + 1):D4}";
    }

    private void ResetNewItem()
    {
        newItem = new MyBlazorServerApp.Models.PurchaseInvoiceItem
        {
            TaxMode = "Line Exclusive",
            Quantity = null,
            Rate = null,
            DiscountPercent = null,
            GSTPercent = null,
            LineTotal = null,
            Category = null
        };
        selectedProductId = null;
        selectedCategory = null;
    }
}

<style>
    .main-card {
        background: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        padding: 20px;
        margin-bottom: 20px;
    }

    .header-container {
        margin-bottom: 20px;
    }

    .page-title {
        margin: 0;
        font-size: 24px;
        color: #1e3a8a;
    }

    .subtitle {
        margin: 5px 0;
        color: #6c757d;
    }

    .action-container {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .search-bar {
        flex-grow: 1;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .grid-two, .grid-three {
        display: grid;
        gap: 10px;
        margin-bottom: 10px;
    }

    .grid-two {
        grid-template-columns: 1fr 1fr;
    }

    .grid-three {
        grid-template-columns: 1fr 1fr 1fr;
    }

    .form-item {
        display: flex;
        flex-direction: column;
    }

    .form-label {
        margin-bottom: 5px;
        font-weight: bold;
    }

    .radio-group {
        display: flex;
        gap: 10px;
    }

    .radio-input {
        margin-right: 5px;
    }

    .form-actions {
        margin-top: 10px;
    }

    .full-width {
        width: 100%;
    }

    .items-table {
        margin-top: 20px;
    }

    .table-custom {
        width: 100%;
        border-collapse: collapse;
    }

        .table-custom th, .table-custom td {
            padding: 8px;
            text-align: left;
            border: 1px solid #dee2e6;
        }

    .table-header-darkblue {
        background-color: #1e3a8a !important;
        color: white !important;
    }

        .table-header-darkblue th {
            color: white !important;
            background-color: #1e3a8a !important;
        }

    .summary {
        margin-top: 20px;
    }

    .product-table-box {
        margin-top: 20px;
    }

    .btn-primary {
        background-color: #1e3a8a;
        color: white;
        border: none;
        padding: 8px 15px;
        border-radius: 4px;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
        border: none;
        padding: 8px 15px;
        border-radius: 4px;
    }

    .btn-warning-soft {
        background-color: #fef3c7;
        color: #92400e;
        border: none;
        padding: 6px 10px;
        border-radius: 4px;
        font-size: 12px;
    }

    .btn-danger-soft {
        background-color: #fee2e2;
        color: #991b1b;
        border: none;
        padding: 6px 10px;
        border-radius: 4px;
        font-size: 12px;
    }

    .btn-info-soft {
        background-color: #dbeafe;
        color: #1e40af;
        border: none;
        padding: 6px 10px;
        border-radius: 4px;
        font-size: 12px;
    }

    .action-buttons {
        display: flex;
        gap: 4px;
        flex-wrap: nowrap;
        white-space: nowrap;
    }

    .text-muted {
        color: #6c757d;
        font-size: 0.875rem;
    }

    .text-danger {
        color: #dc3545;
        font-weight: bold;
    }

    @@media (max-width: 768px) {
        .page-title {
            font-size: 20px;
        }

        .subtitle {
            font-size: 14px;
        }

        .action-container {
            justify-content: center;
        }

        .search-bar .form-control {
            width: 100%;
            max-width: 200px;
        }

        .grid-two, .grid-three {
            grid-template-columns: 1fr;
        }

        .form-actions {
            text-align: center;
        }

        .table-custom th, .table-custom td {
            min-width: 100px;
            padding: 6px;
            font-size: 12px;
        }

        .action-buttons {
            flex-direction: column;
        }

        .btn-warning-soft, .btn-danger-soft, .btn-info-soft {
            width: 100%;
            text-align: center;
        }
    }

    @@media (min-width: 769px) and (max-width: 1024px) {
        .grid-two {
            grid-template-columns: 1fr 1fr;
        }

        .grid-three {
            grid-template-columns: 1fr 1fr;
        }

        .form-actions {
            text-align: right;
        }
    }

    @@media (min-width: 1025px) {
        .grid-two {
            grid-template-columns: 1fr 1fr;
        }

        .grid-three {
            grid-template-columns: 1fr 1fr 1fr;
        }

        .form-actions {
            text-align: right;
        }
    }
</style>
@page "/customers"
@using MyBlazorServerApp.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@inject IDbContextFactory<AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<div class="main-card">
    <div class="header-container">
        @if (!isFormVisible)
        {
            <h3 class="page-title">Customers</h3>
            <p class="subtitle">Manage all your customer records</p>
            <div class="action-container">
                <div class="search-bar">
                    <InputText class="form-control" @bind-Value="searchText" placeholder="Search customers..." @oninput="OnSearchInput" />
                </div>
                <button class="btn btn-primary search-btn" @onclick="ApplyFilter">Search</button>
                <button class="btn btn-primary add-btn" @onclick="ShowAddForm">Add Customer</button>
            </div>
        }
        else
        {
            <div class="form-header">
                <h2 class="page-title">@(editingCustomer == null ? "Add New Customer" : "Edit Customer")</h2>
                <button class="btn btn-primary" @onclick="BackToList">Back to List</button>
            </div>
        }
    </div>

    @if (isFormVisible)
    {
        <div class="add-card">
            <EditForm Model="customerModel" OnValidSubmit="SaveCustomer">
                <DataAnnotationsValidator />
                <ValidationSummary />
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }

                <div class="grid-four">
                    <div class="form-item">
                        <label class="form-label">Customer ID</label>
                        <InputText class="form-control" @bind-Value="customerModel.Code" />
                    </div>
                    <div class="form-item">
                        <label class="form-label">Customer Name</label>
                        <InputText class="form-control" @bind-Value="customerModel.Name" />
                    </div>
                    <div class="form-item">
                        <label class="form-label">Phone</label>
                        <InputText class="form-control" @bind-Value="customerModel.Phone" />
                    </div>
                    <div class="form-item">
                        <label class="form-label">GSTIN</label>
                        <InputText class="form-control" @bind-Value="customerModel.Gstin" />
                    </div>
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn btn-success">
                        @(editingCustomer == null ? "Save Customer" : "Update Customer")
                    </button>
                </div>
            </EditForm>
        </div>
    }
    else
    {
        <div class="customer-table-box">
            <table class="table table-custom">
                <thead>
                    <tr>
                        <th>CUSTOMER ID</th>
                        <th>NAME</th>
                        <th>PHONE</th>
                        <th>GSTIN</th>
                        <th style="width:180px;">ACTIONS</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredCustomers.Count == 0)
                    {
                        <tr><td colspan="5" class="text-center">No customers found.</td></tr>
                    }
                    else
                    {
                        @foreach (var customer in filteredCustomers)
                        {
                            <tr>
                                <td>@customer.Code</td>
                                <td>@customer.Name</td>
                                <td>@customer.Phone</td>
                                <td>@customer.Gstin</td>
                                <td>
                                    <button class="btn btn-warning btn-sm me-1" @onclick="() => EditCustomer(customer)">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteCustomer(customer)">Delete</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<Customer> customers = new();
    private List<Customer> filteredCustomers = new();
    private Customer customerModel = new();
    private Customer? editingCustomer;
    private bool isFormVisible = false;
    private string searchText = string.Empty;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            customers = await db.Customers
                .Where(c => !c.IsDeleted)
                .OrderBy(c => c.Id)
                .ToListAsync();
            ApplyFilter();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading customers: {ex.Message}";
        }
    }

    private void ShowAddForm()
    {
        editingCustomer = null;
        customerModel = new Customer();
        isFormVisible = true;
        errorMessage = "";
    }

    private void BackToList()
    {
        isFormVisible = false;
        editingCustomer = null;
        errorMessage = "";
    }

    private async Task SaveCustomer()
    {
        try
        {
            using var db = DbFactory.CreateDbContext();

            if (editingCustomer == null)
            {
                if (await db.Customers.AnyAsync(c => c.Code == customerModel.Code))
                {
                    errorMessage = "Customer ID (Code) must be unique.";
                    return;
                }

                db.Customers.Add(customerModel);
            }
            else
            {
                var existing = await db.Customers.FirstOrDefaultAsync(c => c.Id == editingCustomer.Id);
                if (existing != null)
                {
                    existing.Code = customerModel.Code;
                    existing.Name = customerModel.Name;
                    existing.Phone = customerModel.Phone;
                    existing.Gstin = customerModel.Gstin;
                    db.Customers.Update(existing);
                }
            }

            await db.SaveChangesAsync();
            await LoadCustomers();
            isFormVisible = false;
            errorMessage = "";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving customer: {ex.Message}";
        }
    }

    private void EditCustomer(Customer customer)
    {
        editingCustomer = customer;
        customerModel = new Customer
        {
            Id = customer.Id,
            Code = customer.Code,
            Name = customer.Name,
            Phone = customer.Phone,
            Gstin = customer.Gstin
        };
        isFormVisible = true;
        errorMessage = "";
    }

    private async Task DeleteCustomer(Customer customer)
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            var existing = await db.Customers.FirstOrDefaultAsync(c => c.Id == customer.Id);
            if (existing != null)
            {
                db.Customers.Remove(existing);
                await db.SaveChangesAsync();
                await LoadCustomers();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting customer: {ex.Message}";
        }
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? "";
        ApplyFilter();
    }

    private void ApplyFilter()
    {
        filteredCustomers = customers
            .Where(c =>
                c.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                c.Code.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                (c.Phone ?? "").Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                (c.Gstin ?? "").Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }
}


<style>
    .main-card {
        background: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
    }

    .header-container {
        margin-bottom: 20px;
    }

    .page-title {
        font-size: 24px;
        color: #1e3a8a;
        margin-bottom: 10px;
    }

    .subtitle {
        font-size: 16px;
        color: #1d3557;
        margin-bottom: 15px;
    }

    .action-container {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        flex-wrap: wrap;
    }

    .search-bar .form-control {
        width: 200px;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .btn-primary {
        background-color: #1e3a8a;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
    }

    .btn-warning {
        background-color: #ADD8E6;
        color: darkblue;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
    }

    .btn-danger {
        background-color: #FFCCCC;
        color: darkred;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
    }

    .add-card {
        background: #e0e2ea;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 20px auto;
        width: 90%;
    }

    .form-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        flex-wrap: wrap;
    }

    .grid-four {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 12px;
    }

    .form-item {
        display: flex;
        flex-direction: column;
    }

    .form-actions {
        margin-top: 16px;
        text-align: right;
    }

    .customer-table-box {
        margin-top: 20px;
    }

    .table-custom {
        width: 100%;
        border-collapse: collapse;
    }

        .table-custom th, .table-custom td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

    .pagination-info {
        margin-top: 10px;
        text-align: right;
        padding: 10px;
        color: #1d3557;
        font-size: 14px;
    }

    .alert {
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ffeeba;
        border-radius: 4px;
        background-color: #fff3cd;
        color: #856404;
    }

    .alert-danger {
        background-color: #f8d7da;
        border-color: #f5c6cb;
        color: #721c24;
    }

    /* Responsive Adjustments */
    @@media (max-width: 768px) {
        /* Mobile View */
        .page-title {
            font-size: 20px;
        }

        .subtitle {
            font-size: 14px;
        }

        .action-container {
            justify-content: center;
        }

        .search-bar .form-control {
            width: 100%;
            max-width: 200px;
        }

        .form-header {
            flex-direction: column;
            gap: 10px;
            text-align: center;
        }

        .grid-four {
            grid-template-columns: 1fr;
        }

        .form-actions {
            text-align: center;
        }

        .customer-table-box table {
            display: block;
            overflow-x: auto;
        }

        .table-custom th, .table-custom td {
            min-width: 100px;
            padding: 8px;
            font-size: 14px;
        }

        .table-custom th {
            white-space: nowrap;
        }

        .pagination-info {
            text-align: center;
        }

        .btn-primary, .btn-warning, .btn-danger {
            width: 100%;
            margin-bottom: 5px;
        }
    }

    @@media (min-width: 769px) and (max-width: 1024px) {
        /* Tablet View */
        .page-title {
            font-size: 22px;
        }

        .subtitle {
            font-size: 15px;
        }

        .action-container {
            justify-content: flex-end;
        }

        .search-bar .form-control {
            width: 180px;
        }

        .grid-four {
            grid-template-columns: repeat(2, 1fr);
        }

        .form-actions {
            text-align: right;
        }

        .table-custom th, .table-custom td {
            padding: 8px;
            font-size: 14px;
        }

        .pagination-info {
            text-align: right;
        }
    }

    @@media (min-width: 1025px) {
        /* Desktop View */
        .page-title {
            font-size: 24px;
        }

        .subtitle {
            font-size: 16px;
        }

        .action-container {
            justify-content: flex-end;
        }

        .search-bar .form-control {
            width: 200px;
        }

        .grid-four {
            grid-template-columns: repeat(4, 1fr);
        }

        .form-actions {
            text-align: right;
        }

        .table-custom th, .table-custom td {
            padding: 10px;
            font-size: 16px;
        }

        .pagination-info {
            text-align: right;
        }
    }
</style>
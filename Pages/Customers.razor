@page "/customers"
@page "/customers/create"
@page "/customers/edit/{id:int}"
@page "/customers/delete/{id:int}"
@using MyBlazorServerApp.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@inject MyBlazorServerApp.Data.AppDbContext Db
@inject NavigationManager NavigationManager
<div class="main-card">
    <div class="header-container">
        @if (!isFormVisible)
        {
            <h3 class="page-title">Customers</h3>
            <p class="subtitle">Manage all your customer records</p>
            <div class="action-container">
                <div class="search-bar">
                    <InputText class="form-control" @bind-Value="searchText" placeholder="Search customers..." @oninput="OnSearchInput" />
                </div>
                <button class="btn btn-primary search-btn" @onclick="ApplyFilter">Search</button>
                <button class="btn btn-primary add-btn" @onclick="ShowAddForm">Add Customer</button>
            </div>
        }
        else
        {
            <div class="form-header">
                <h2 class="page-title">@(editingCustomer == null ? "Add New Customer" : "Edit Customer")</h2>
                <button class="btn btn-primary" @onclick="BackToList">View All Customers</button>
            </div>
        }
    </div>
    @if (isFormVisible)
    {
        <div class="add-card">
            <div class="inner-box">
                <EditForm Model="customerModel" OnValidSubmit="SaveCustomer">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="grid-four">
                        <div class="form-item">
                            <label class="form-label">Customer ID</label>
                            <InputText class="form-control" @bind-Value="customerModel.Code" />
                        </div>
                        <div class="form-item">
                            <label class="form-label">Customer Name</label>
                            <InputText class="form-control" @bind-Value="customerModel.Name" />
                        </div>
                        <div class="form-item">
                            <label class="form-label">Phone</label>
                            <InputText class="form-control" @bind-Value="customerModel.Phone" />
                        </div>
                        <div class="form-item">
                            <label class="form-label">GSTIN</label>
                            <InputText class="form-control" @bind-Value="customerModel.Gstin" />
                        </div>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="btn btn-success" style="background-color:#1e3a8a;color:white;">
                            @(editingCustomer == null ? "Save Customer" : "Update Customer")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
    @if (!isFormVisible)
    {
        <div class="customer-table-box">
            <table class="table table-custom">
                <thead>
                    <tr>
                        <th style="background-color: #1e3a8a; color: white;">CUSTOMER ID</th>
                        <th style="background-color: #1e3a8a; color: white;">NAME</th>
                        <th style="background-color: #1e3a8a; color: white;">PHONE</th>
                        <th style="background-color: #1e3a8a; color: white;">GSTIN</th>
                        <th style="background-color: #1e3a8a; color: white; width:180px;">ACTIONS</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredCustomers.Count == 0)
                    {
                        <tr><td colspan="5" class="text-center">No customers found.</td></tr>
                    }
                    else
                    {
                        @for (int i = 0; i < filteredCustomers.Count; i++)
                        {
                            var customer = filteredCustomers[i];
                            <tr style="@(customer.IsDeleted ? "opacity:0.5;text-decoration:line-through;" : "")">
                                <td>@customer.Code</td>
                                <td>@customer.Name</td>
                                <td>@customer.Phone</td>
                                <td>@customer.Gstin</td>
                                <td>
                                    <button class="btn btn-warning btn-sm me-1" @onclick="() => EditCustomer(customer)">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteCustomer(customer)">Delete</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            @if (filteredCustomers.Count > 0)
            {
                <div class="pagination-info" style="text-align: right; padding: 10px; color: #1d3557; font-size: 14px;">
                    @($"Showing {((currentPage - 1) * pageSize + 1)}-{Math.Min(currentPage * pageSize, filteredCustomers.Count)} of {filteredCustomers.Count} customers")
                </div>
            }
        </div>
    }
</div>
@code {
    [Parameter] public int id { get; set; }
    private List<Customer> customers = new();
    private List<Customer> filteredCustomers = new();
    private Customer customerModel = new();
    private Customer? editingCustomer;
    private bool isFormVisible = false;
    private string searchText = string.Empty;
    private int currentPage = 1;
    private int pageSize = 5;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
        ApplyFilter();
        if (id > 0)
        {
            if (NavigationManager.Uri.Contains("/customers/edit/"))
            {
                await EditCustomerInitialization();
            }
            else if (NavigationManager.Uri.Contains("/customers/delete/"))
            {
                await DeleteCustomerInitialization();
            }
        }
    }

    private async Task LoadCustomers()
    {
        try
        {
            customers = await Db.Customers.IgnoreQueryFilters().ToListAsync() ?? new List<Customer>();
            filteredCustomers = customers.Where(c => !c.IsDeleted).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading customers: {ex.Message}";
        }
    }

    private async Task EditCustomerInitialization()
    {
        var customer = await Db.Customers.IgnoreQueryFilters().FirstOrDefaultAsync(c => c.Id == id);
        if (customer != null)
        {
            editingCustomer = customer;
            customerModel = new Customer
            {
                Id = customer.Id,
                Code = customer.Code,
                Name = customer.Name,
                Phone = customer.Phone,
                Gstin = customer.Gstin,
                IsDeleted = customer.IsDeleted
            };
            isFormVisible = true;
        }
        else
        {
            errorMessage = "Customer not found for editing.";
        }
    }

    private async Task DeleteCustomerInitialization()
    {
        var customer = await Db.Customers.IgnoreQueryFilters().FirstOrDefaultAsync(c => c.Id == id);
        if (customer != null)
        {
            editingCustomer = customer;
            await DeleteCustomer(customer);
        }
        else
        {
            errorMessage = "Customer not found for deletion.";
        }
    }

    private void ShowAddForm()
    {
        editingCustomer = null;
        customerModel = new Customer();
        isFormVisible = true;
    }

    private void BackToList()
    {
        isFormVisible = false;
        editingCustomer = null;
    }

    private async Task SaveCustomer()
    {
        try
        {
            if (editingCustomer == null)
            {
                if (string.IsNullOrWhiteSpace(customerModel.Code) || string.IsNullOrWhiteSpace(customerModel.Name))
                {
                    errorMessage = "Customer ID and Name are required.";
                    return;
                }
                if (await Db.Customers.IgnoreQueryFilters().AnyAsync(c => c.Code == customerModel.Code))
                {
                    errorMessage = "Customer ID (Code) must be unique.";
                    return;
                }
                customerModel.Id = 0; // Ensure EF treats this as new
                customerModel.IsDeleted = false;
                Db.Customers.Add(customerModel);
            }
            else
            {
                var existingCustomer = await Db.Customers.IgnoreQueryFilters().FirstOrDefaultAsync(c => c.Id == editingCustomer.Id);
                if (existingCustomer != null)
                {
                    if (await Db.Customers.IgnoreQueryFilters().AnyAsync(c => c.Code == customerModel.Code && c.Id != customerModel.Id))
                    {
                        errorMessage = "Customer ID (Code) must be unique.";
                        return;
                    }
                    existingCustomer.Code = customerModel.Code;
                    existingCustomer.Name = customerModel.Name;
                    existingCustomer.Phone = customerModel.Phone;
                    existingCustomer.Gstin = customerModel.Gstin;
                    Db.Customers.Update(existingCustomer);
                }
            }
            await Db.SaveChangesAsync();
            errorMessage = "";
            isFormVisible = false;
            await LoadCustomers();
            ApplyFilter();
        }
        catch (DbUpdateException ex)
        {
            errorMessage = $"Database error: {ex.InnerException?.Message ?? ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving customer: {ex.Message}";
        }
    }

    private void EditCustomer(Customer customer)
    {
        editingCustomer = customer;
        customerModel = new Customer
        {
            Id = customer.Id,
            Code = customer.Code,
            Name = customer.Name,
            Phone = customer.Phone,
            Gstin = customer.Gstin,
            IsDeleted = customer.IsDeleted
        };
        isFormVisible = true;
        NavigationManager.NavigateTo($"/customers/edit/{customer.Id}");
    }

    private async Task DeleteCustomer(Customer customer)
    {
        try
        {
            var existingCustomer = await Db.Customers.IgnoreQueryFilters().FirstOrDefaultAsync(c => c.Id == customer.Id);
            if (existingCustomer != null)
            {
                existingCustomer.IsDeleted = true;
                Db.Customers.Update(existingCustomer);
                await Db.SaveChangesAsync();
                await LoadCustomers();
                ApplyFilter();
                if (NavigationManager.Uri.Contains("/customers/delete/"))
                {
                    NavigationManager.NavigateTo("/customers");
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting customer: {ex.Message}";
        }
    }

    private void ApplyFilter()
    {
        filteredCustomers = customers
            .Where(c => string.IsNullOrEmpty(searchText) || c.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                       c.Code.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                       c.Phone.Contains(searchText) ||
                       c.Gstin.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? string.Empty;
        currentPage = 1; // Reset to first page on search
        ApplyFilter();
    }
}
<style>
    .main-card {
        background: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
    }

    .header-container {
        margin-bottom: 20px;
    }

    .page-title {
        font-size: 24px;
        color: #1e3a8a;
        margin-bottom: 10px;
    }

    .subtitle {
        font-size: 16px;
        color: #1d3557;
        margin-bottom: 15px;
    }

    .action-container {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }

    .search-bar .form-control {
        width: 200px;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .btn-primary {
        background-color: #1e3a8a;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
    }

    .btn-warning {
        background-color: #ADD8E6;
        color: darkblue;
        border: none;
    }

    .btn-danger {
        background-color: #FFCCCC;
        color: darkred;
        border: none;
    }

    .add-card {
        background: #e0e2ea;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 20px auto;
        width: 90%;
    }

    .form-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .grid-four {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 12px;
    }

    .form-item {
        display: flex;
        flex-direction: column;
    }

    .form-actions {
        margin-top: 16px;
        text-align: right;
    }

    .customer-table-box {
        margin-top: 20px;
    }

    .table-custom {
        width: 100%;
        border-collapse: collapse;
    }

        .table-custom th, .table-custom td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

    .pagination-info {
        margin-top: 10px;
    }
</style>
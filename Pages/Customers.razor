@page "/customers"
@using MyBlazorServerApp.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@using System.Data
@inject IDbContextFactory<AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<div class="main-card">
    <div class="header-container">
        @if (!isFormVisible)
        {
            <h3 class="page-title">Customers</h3>
            <p class="subtitle">Manage all your customer records</p>
            <div class="action-container">
                <div class="search-bar">
                    <InputText class="form-control" @bind-Value="searchText" placeholder="Search customers..." @oninput="OnSearchInput" />
                </div>
                <button class="btn btn-primary search-btn" @onclick="ApplyFilter">Search</button>
                <button class="btn btn-primary add-btn" @onclick="ShowAddForm">Add Customer</button>
            </div>
        }
        else
        {
            <div class="form-header">
                <h2 class="page-title">@(editingCustomer == null ? "Add New Customer" : "Edit Customer")</h2>
                <button class="btn btn-primary" @onclick="BackToList">Back to List</button>
            </div>
        }
    </div>

    @if (isFormVisible)
    {
        <div class="add-card">
            <EditForm Model="customerModel" OnValidSubmit="SaveCustomer">
                <DataAnnotationsValidator />
                <ValidationSummary />
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }

                <div class="grid-four">
                    <!-- CUSTOMER ID -->
                    <div class="form-item">
                        <label class="form-label">Customer ID</label>
                        <InputText class="form-control" @bind-Value="customerModel.Code" readonly />
                        @if (editingCustomer == null)
                        {
                            <small class="text-muted">Assigned automatically (e.g., CUST001)</small>
                        }
                    </div>

                    <div class="form-item">
                        <label class="form-label">Customer Name <span class="text-danger">*</span></label>
                        <InputText class="form-control" @bind-Value="customerModel.Name" required />
                        <ValidationMessage For="@(() => customerModel.Name)" />
                    </div>

                    <!-- PHONE: MAX 12 DIGITS + VALIDATION -->
                    <div class="form-item">
                        <label class="form-label">Phone</label>
                        <div class="@(phoneError ? "input-group-error" : "")">
                            <InputText @bind-Value="customerModel.Phone"
                                       type="tel"
                                       maxlength="12"
                                       placeholder="e.g., 919876543210"
                                       @oninput="OnPhoneInput"
                                       class="form-control" />
                        </div>
                        @if (phoneError)
                        {
                            <div class="invalid-feedback">
                                Phone must be 12 digits or less and contain only numbers.
                            </div>
                        }
                </div>

                <div class="form-item">
                    <label class="form-label">GSTIN</label>
                    <InputText class="form-control" @bind-Value="customerModel.Gstin" />
                </div>
            </div>

            <div class="form-actions">
                <button type="submit" class="btn btn-success" disabled="@isSaving">
                    @(
                                        isSaving
                                        ? (editingCustomer == null ? "Saving..." : "Updating...")
                                        : (editingCustomer == null ? "Save Customer" : "Update Customer")
                                        )
                </button>
            </div>
        </EditForm>
    </div>
        }
    else
    {
        <div class="customer-table-box">
            <table class="table table-custom">
                <thead>
                    <tr>
                        <th>CUSTOMER ID</th>
                        <th>NAME</th>
                        <th>PHONE</th>
                        <th>GSTIN</th>
                        <th style="width:180px;">ACTIONS</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredCustomers.Count == 0)
                    {
                        <tr><td colspan="5" class="text-center">No customers found.</td></tr>
                    }
                    else
                    {
                        @foreach (var customer in filteredCustomers)
                        {
                            <tr>
                                <td>@customer.Code</td>
                                <td>@customer.Name</td>
                                <td>@customer.Phone</td>
                                <td>@customer.Gstin</td>
                                <td>
                                    <button class="btn btn-warning btn-sm me-1" @onclick="() => EditCustomer(customer)">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="async () => await DeleteCustomer(customer)">Delete</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<Customer> customers = new();
    private List<Customer> filteredCustomers = new();
    private Customer customerModel = new();
    private Customer? editingCustomer;
    private bool isFormVisible = false;
    private string searchText = string.Empty;
    private string errorMessage = "";
    private bool phoneError = false;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            customers = await db.Customers
                .Where(c => !c.IsDeleted)
                .OrderBy(c => c.Id)
                .ToListAsync();
            ApplyFilter();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading customers: {ex.Message}";
        }
    }

    // Fill a UI candidate for Code (non-atomic — real allocation is done via sequence on Save)
    private async Task ShowAddForm()
    {
        editingCustomer = null;
        customerModel = new Customer();

        try
        {
            using var db = DbFactory.CreateDbContext();
            customerModel.Code = await GetNextCustomerCodeCandidateAsync(db);
        }
        catch
        {
            customerModel.Code = "CUST001";
        }

        phoneError = false;
        isFormVisible = true;
        errorMessage = "";
    }

    private void BackToList()
    {
        isFormVisible = false;
        editingCustomer = null;
        phoneError = false;
        errorMessage = "";
        isSaving = false;
    }

    private void OnPhoneInput(ChangeEventArgs e)
    {
        var value = e.Value?.ToString() ?? "";
        customerModel.Phone = value;

        phoneError = !string.IsNullOrEmpty(value) &&
                     (value.Length > 12 || !value.All(char.IsDigit));

        StateHasChanged();
    }

    // Helper (UI candidate): scans existing codes to propose next — not used for actual insertion.
    private async Task<string> GetNextCustomerCodeCandidateAsync(AppDbContext db)
    {
        var codes = await db.Customers
            .Where(c => c.Code != null && c.Code.StartsWith("CUST"))
            .Select(c => c.Code!)
            .ToListAsync();

        int maxNum = 0;
        foreach (var code in codes)
        {
            if (code.Length <= 4) continue;
            var numericPart = code.Substring(4); // after "CUST"
            if (int.TryParse(numericPart, out int n))
            {
                if (n > maxNum) maxNum = n;
            }
        }

        return $"CUST{(maxNum + 1):D3}";
    }

    // MAIN SAVE: uses DB sequence (dbo.CustomerCodeSeq) to fetch unique number atomically with retry.
    private async Task SaveCustomer()
    {
        // CLIENT-SIDE PHONE VALIDATION
        if (!string.IsNullOrEmpty(customerModel.Phone) &&
            (customerModel.Phone.Length > 12 || !customerModel.Phone.All(char.IsDigit)))
        {
            errorMessage = "Phone must be 12 digits or less and contain only numbers.";
            return;
        }

        isSaving = true;
        errorMessage = "";

        try
        {
            // If editing -> simple update (no Code change)
            if (editingCustomer != null)
            {
                using var db = DbFactory.CreateDbContext();
                var existing = await db.Customers.FirstOrDefaultAsync(c => c.Id == editingCustomer.Id);
                if (existing != null)
                {
                    existing.Name = customerModel.Name;
                    existing.Phone = customerModel.Phone;
                    existing.Gstin = customerModel.Gstin;
                    existing.Address = customerModel.Address;
                    existing.Email = customerModel.Email;
                    db.Customers.Update(existing);
                    await db.SaveChangesAsync();
                }

                await LoadCustomers();
                isFormVisible = false;
                return;
            }

            // NEW CUSTOMER: retry loop using DB sequence to avoid collisions
            const int maxRetries = 3;
            int attempt = 0;
            bool saved = false;

            while (!saved && attempt < maxRetries)
            {
                attempt++;
                try
                {
                    using var db = DbFactory.CreateDbContext();
                    var conn = db.Database.GetDbConnection();
                    if (conn.State != System.Data.ConnectionState.Open)
                        await conn.OpenAsync();

                    using var cmd = conn.CreateCommand();
                    cmd.CommandText = "SELECT NEXT VALUE FOR dbo.CustomerCodeSeq;";
                    cmd.CommandType = System.Data.CommandType.Text;

                    var scalar = await cmd.ExecuteScalarAsync();
                    if (scalar == null)
                        throw new Exception("Failed to obtain next sequence value for CustomerCodeSeq.");

                    long seqVal;
                    if (scalar is int si) seqVal = si;
                    else if (scalar is long sl) seqVal = sl;
                    else if (long.TryParse(scalar.ToString(), out var p)) seqVal = p;
                    else throw new Exception("Unexpected sequence result type: " + scalar.GetType());

                    var nextCode = $"CUST{seqVal:D3}";

                    var newCustomer = new Customer
                    {
                        Code = nextCode,
                        Name = customerModel.Name?.Trim(),
                        Phone = customerModel.Phone,
                        Gstin = customerModel.Gstin,
                        Address = customerModel.Address,
                        Email = customerModel.Email,
                        IsDeleted = false
                    };

                    db.Customers.Add(newCustomer);
                    await db.SaveChangesAsync();

                    // reflect saved customer in UI model
                    customerModel = new Customer
                    {
                        Id = newCustomer.Id,
                        Code = newCustomer.Code,
                        Name = newCustomer.Name,
                        Phone = newCustomer.Phone,
                        Gstin = newCustomer.Gstin,
                        Address = newCustomer.Address,
                        Email = newCustomer.Email
                    };

                    saved = true;
                }
                catch (DbUpdateException dbEx)
                {
                    // If unique key on Code, retry (get next sequence value)
                    if (dbEx.InnerException != null &&
                        (dbEx.InnerException.Message.Contains("IX_Customers_Code") ||
                         dbEx.InnerException.Message.Contains("duplicate key") ||
                         dbEx.InnerException.Message.Contains("Violation of UNIQUE KEY")))
                    {
                        // small wait then retry to consume next sequence value
                        await Task.Delay(100);
                        continue;
                    }
                    // other DB update error -> rethrow to outer catch
                    throw;
                }
            }

            if (!saved)
            {
                errorMessage = "Failed to save customer after multiple attempts. Please try again.";
                return;
            }

            // success - reload list and close form
            await LoadCustomers();
            isFormVisible = false;
            phoneError = false;
        }
        catch (DbUpdateException dbEx)
        {
            Console.WriteLine($"SAVE ERROR (DbUpdate): {dbEx}");
            errorMessage = "Failed to save customer due to database constraint. Please try again.";
            if (dbEx.InnerException != null) errorMessage += $"\nDetails: {dbEx.InnerException.Message}";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SAVE ERROR: {ex}");
            errorMessage = $"Error saving customer: {ex.Message}";
            if (ex.InnerException != null) errorMessage += $"\nDetails: {ex.InnerException.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void EditCustomer(Customer customer)
    {
        editingCustomer = customer;
        customerModel = new Customer
        {
            Id = customer.Id,
            Code = customer.Code,
            Name = customer.Name,
            Phone = customer.Phone,
            Gstin = customer.Gstin,
            Address = customer.Address,
            Email = customer.Email
        };
        phoneError = false;
        isFormVisible = true;
        errorMessage = "";
    }

    private async Task DeleteCustomer(Customer customer)
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            var existing = await db.Customers.FirstOrDefaultAsync(c => c.Id == customer.Id);
            if (existing != null)
            {
                existing.IsDeleted = true;
                await db.SaveChangesAsync();
                await LoadCustomers();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting customer: {ex.Message}";
        }
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? "";
        ApplyFilter();
    }

    private void ApplyFilter()
    {
        filteredCustomers = customers
            .Where(c =>
                c.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                (c.Code ?? "").Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                (c.Phone ?? "").Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                (c.Gstin ?? "").Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }
}

<style>
    .main-card {
        background: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
    }

    .header-container {
        margin-bottom: 20px;
    }

    .page-title {
        font-size: 24px;
        color: #1e3a8a;
        margin-bottom: 10px;
    }

    .subtitle {
        font-size: 16px;
        color: #1d3557;
        margin-bottom: 15px;
    }

    .action-container {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        flex-wrap: wrap;
    }

    .search-bar .form-control {
        width: 200px;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .btn-primary {
        background-color: #1e3a8a;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
    }

    .btn-warning {
        background-color: #ADD8E6;
        color: darkblue;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
    }

    .btn-danger {
        background-color: #FFCCCC;
        color: darkred;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
    }

    .add-card {
        background: #e0e2ea;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 20px auto;
        width: 90%;
    }

    .form-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        flex-wrap: wrap;
    }

    .grid-four {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 12px;
    }

    .form-item {
        display: flex;
        flex-direction: column;
    }

        .form-item input[readonly] {
            background-color: #f0f0f0;
            color: #555;
            cursor: not-allowed;
        }

    .form-actions {
        margin-top: 16px;
        text-align: right;
    }

    .customer-table-box {
        margin-top: 20px;
    }

    .table-custom {
        width: 100%;
        border-collapse: collapse;
    }

        .table-custom th, .table-custom td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .table-custom thead th {
            background-color: #1e3a8a !important;
            color: white !important;
            font-weight: bold !important;
        }

    .alert {
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ffeeba;
        border-radius: 4px;
        background-color: #fff3cd;
        color: #856404;
    }

    .alert-danger {
        background-color: #f8d7da;
        border-color: #f5c6cb;
        color: #721c24;
    }

    .input-group-error .form-control {
        border-color: #dc3545 !important;
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
    }

    .invalid-feedback {
        color: #dc3545;
        font-size: 12px;
        margin-top: 4px;
        display: block;
    }

    @@media (max-width: 768px) {
        .grid-four {
            grid-template-columns: 1fr;
        }

        .action-container {
            justify-content: center;
        }

        .form-actions {
            text-align: center;
        }

        .table-custom {
            display: block;
            overflow-x: auto;
        }
    }

    @@media (min-width: 769px) and (max-width: 1024px) {
        .grid-four {
            grid-template-columns: repeat(2, 1fr);
        }
    }
</style>

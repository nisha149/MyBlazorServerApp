@page "/products"
@using System.ComponentModel.DataAnnotations
@using Microsoft.JSInterop
@using MyBlazorServerApp.Models
@inject IJSRuntime JSRuntime
@inject IDbContextFactory<AppDbContext> DbFactory
<div class="main-card">
    <div class="header-container">
        @if (!isFormVisible)
        {
            <h3 class="page-title">Products</h3>
            <p class="subtitle">Manage all your products listings</p>
            <div class="action-container">
                <div class="search-bar">
                    <InputText class="form-control" @bind-Value="searchText" placeholder="Search products..." @oninput="OnSearchInput" />
                </div>
                <button class="btn btn-primary search-btn" @onclick="ApplyFilter">Search</button>
                <button class="btn btn-primary add-btn" @onclick="ShowAddForm">Add Product</button>
            </div>
        }
        else
        {
            <div class="form-header">
                <h2 class="page-title">@(editingProduct == null ? "Add New Product" : "Edit Product")</h2>
                <button class="btn btn-primary" @onclick="BackToList">View All Products</button>
            </div>
        }
    </div>
    @if (isFormVisible)
    {
        <div class="add-card">
            <div class="inner-box">
                <EditForm Model="productModel" OnValidSubmit="SaveProduct">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="grid-four">
                        <!-- Row 1 -->
                        <div class="form-item">
                            <label class="form-label">Category</label>
                            <InputSelect class="form-control" @bind-Value="productModel.CategoryId">
                                <option value="">Select a category</option>
                                @foreach (var group in productGroups)
                                {
                                    <option value="@group.Id">@group.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="form-item">
                            <label class="form-label">Product ID</label>
                            <InputNumber class="form-control" @bind-Value="productModel.Id" disabled="@(editingProduct != null)" />
                        </div>
                        <div class="form-item">
                            <label class="form-label">Product Name</label>
                            <InputText class="form-control" @bind-Value="productModel.Name" />
                        </div>
                        <div class="form-item">
                            <label class="form-label">HSN Code</label>
                            <InputText class="form-control" @bind-Value="productModel.HsnCode" />
                        </div>
                        <!-- Row 2 -->
                        <div class="form-item">
                            <label class="form-label">Unit</label>
                            <InputSelect class="form-control" @bind-Value="productModel.Unit">
                                <option value="">Select Unit</option>
                                <option>Nos</option>
                                <option>Kg</option>
                                <option>Litre</option>
                                <option>Box</option>
                                <option>Pack</option>
                                <option>Piece</option>
                            </InputSelect>
                        </div>
                        <div class="form-item">
                            <label class="form-label">Purchase Rate</label>
                            <InputNumber class="form-control" @bind-Value="productModel.NextPurchaseRate" />
                        </div>
                        <div class="form-item">
                            <label class="form-label">GST (%)</label>
                            <InputNumber class="form-control" @bind-Value="productModel.GstPercentage" />
                        </div>
                        <div class="form-item">
                            <label class="form-label">Stock Quantity</label>
                            <InputNumber class="form-control" @bind-Value="productModel.StockQuantity" />
                        </div>
                        <!-- Row 3 -->
                        <div class="form-item">
                            <label class="form-label">MRP</label>
                            <InputNumber class="form-control" @bind-Value="productModel.Mrp" />
                        </div>
                        <div class="form-item">
                            <label class="form-label">Discount (%)</label>
                            <InputNumber class="form-control" @bind-Value="productModel.DiscountPercentage" />
                        </div>
                        <div class="form-item">
                            <label class="form-label">Retail Rate</label>
                            <InputNumber class="form-control" @bind-Value="productModel.RetailRate" />
                        </div>
                        <div class="form-item">
                            <label class="form-label">Reorder Level</label>
                            <InputNumber class="form-control" @bind-Value="productModel.ReorderLevel" />
                        </div>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="btn btn-success" style="background-color:#1e3a8a;color:white;">
                            Save Product
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
    @if (!isFormVisible)
    {
        <div class="product-table-box">
            <table class="table table-custom">
                <thead>
                    <tr>
                        <th style="background-color: #1e3a8a; color: white;">PRODUCT ID</th>
                        <th style="background-color: #1e3a8a; color: white;">NAME</th>
                        <th style="background-color: #1e3a8a; color: white;">CATEGORY</th>
                        <th style="background-color: #1e3a8a; color: white;">UNIT</th>
                        <th style="background-color: #1e3a8a; color: white;">RATE (₹)</th>
                        <th style="background-color: #1e3a8a; color: white; width:180px;">ACTIONS</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredProducts.Count == 0)
                    {
                        <tr><td colspan="6" class="text-center">No products found.</td></tr>
                    }
                    else
                    {
                        @for (int i = 0; i < filteredProducts.Count; i++)
                        {
                            var product = filteredProducts[i];
                            <tr>
                                <td>@product.Id</td>
                                <td>@product.Name</td>
                                <td>@(product.ProductGroup?.Name ?? "N/A")</td>
                                <td>@product.Unit</td>
                                <td>₹@product.RetailRate</td>
                                <td>
                                    <button class="btn btn-warning btn-sm me-1" @onclick="() => EditProduct(product)">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteProduct(product)">Delete</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            @if (filteredProducts.Count > 0)
            {
                <div class="pagination-info" style="text-align: right; padding: 10px; color: #1d3557; font-size: 14px;">
                    @($"Showing {((currentPage - 1) * pageSize + 1)}-{Math.Min(currentPage * pageSize, filteredProducts.Count)} of {filteredProducts.Count} products")
                </div>
            }
        </div>
    }
</div>
@code {
    private List<Models.Product> products = new();
    private List<Models.Product> filteredProducts = new();
    private List<Models.ProductGroup> productGroups = new();
    private Models.Product productModel = new();
    private Models.Product? editingProduct;
    private bool isFormVisible = false;
    private string searchText = string.Empty;
    private int currentPage = 1;
    private int pageSize = 5;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        await LoadProductGroups();
        ApplyFilter();
    }

    private async Task LoadProducts()
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            if (db != null)
            {
                products = await db.Products.Include(p => p.ProductGroup).ToListAsync() ?? new List<Models.Product>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
    }

    private async Task LoadProductGroups()
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            if (db != null)
            {
                productGroups = await db.ProductGroups.ToListAsync() ?? new List<Models.ProductGroup>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading product groups: {ex.Message}");
        }
    }

    private void ShowAddForm()
    {
        editingProduct = null;
        productModel = new Models.Product();
        isFormVisible = true;
    }

    private void BackToList()
    {
        isFormVisible = false;
        editingProduct = null;
    }

    private async Task SaveProduct()
    {
        try
        {
            using var db = DbFactory.CreateDbContext();
            if (db != null)
            {
                if (editingProduct == null)
                {
                    // New product
                    // Let the database handle Id generation if it's an IDENTITY column
                    if (productModel.CategoryId.HasValue && !productGroups.Any(g => g.Id == productModel.CategoryId.Value))
                    {
                        Console.WriteLine("Invalid CategoryId selected.");
                        return; // Prevent saving with invalid CategoryId
                    }
                    db.Products.Add(productModel); // Add without manual Id assignment
                }
                else
                {
                    // Edit existing product
                    var existingProduct = await db.Products.FindAsync(editingProduct.Id);
                    if (existingProduct != null)
                    {
                        existingProduct.Name = productModel.Name;
                        existingProduct.CategoryId = productModel.CategoryId;
                        existingProduct.HsnCode = productModel.HsnCode;
                        existingProduct.Unit = productModel.Unit;
                        existingProduct.NextPurchaseRate = productModel.NextPurchaseRate;
                        existingProduct.GstPercentage = productModel.GstPercentage;
                        existingProduct.StockQuantity = productModel.StockQuantity;
                        existingProduct.Mrp = productModel.Mrp;
                        existingProduct.DiscountPercentage = productModel.DiscountPercentage;
                        existingProduct.RetailRate = productModel.RetailRate;
                        existingProduct.ReorderLevel = productModel.ReorderLevel;
                    }
                }
                await db.SaveChangesAsync();
                Console.WriteLine("Product saved successfully.");
                isFormVisible = false;
                await LoadProducts();
                ApplyFilter();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving product: {ex.Message}");
            // Optionally, display an error to the user (e.g., via IJSRuntime or a message component)
        }
    }

    private void EditProduct(Models.Product product)
    {
        editingProduct = product;
        productModel = new Models.Product
        {
            Id = product.Id,
            Name = product.Name,
            CategoryId = product.CategoryId,
            HsnCode = product.HsnCode,
            Unit = product.Unit,
            NextPurchaseRate = product.NextPurchaseRate,
            GstPercentage = product.GstPercentage,
            StockQuantity = product.StockQuantity,
            Mrp = product.Mrp,
            DiscountPercentage = product.DiscountPercentage,
            RetailRate = product.RetailRate,
            ReorderLevel = product.ReorderLevel
        };
        isFormVisible = true;
    }

    private async Task DeleteProduct(Models.Product product)
    {
        using var db = DbFactory.CreateDbContext();
        if (db != null)
        {
            var existingProduct = await db.Products.FindAsync(product.Id);
            if (existingProduct != null)
            {
                db.Products.Remove(existingProduct);
                await db.SaveChangesAsync();
            }
        }
        await LoadProducts();
        ApplyFilter();
    }

    private void ApplyFilter()
    {
        filteredProducts = products
            .Where(p => string.IsNullOrEmpty(searchText) || p.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? string.Empty;
        currentPage = 1; // Reset to first page on search
        ApplyFilter();
    }
}
<style>
    .main-card {
        background: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
    }

    .header-container {
        margin-bottom: 20px;
    }

    .page-title {
        font-size: 24px;
        color: #1e3a8a;
        margin-bottom: 10px;
    }

    .subtitle {
        font-size: 16px;
        color: #1d3557;
        margin-bottom: 15px;
    }

    .action-container {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }

    .search-bar .form-control {
        width: 200px;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .btn-primary {
        background-color: #1e3a8a;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
    }

    .btn-warning {
        background-color: #ADD8E6;
        color: darkblue;
        border: none;
    }

    .btn-danger {
        background-color: #FFCCCC;
        color: darkred;
        border: none;
    }

    .add-card {
        background: #e0e2ea;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 20px auto;
        width: 90%;
    }

    .form-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .grid-four {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 12px;
    }

    .form-item {
        display: flex;
        flex-direction: column;
    }

    .form-actions {
        margin-top: 16px;
        text-align: right;
    }

    .product-table-box {
        margin-top: 20px;
    }

    .table-custom {
        width: 100%;
        border-collapse: collapse;
    }

        .table-custom th, .table-custom td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

    .pagination-info {
        margin-top: 10px;
    }
</style>
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime

<div class="layout-container">
    <!-- Fixed Hamburger Icon (Top-left corner, outside topbar) -->
    <button class="fixed-hamburger" @onclick="ToggleMenu">
        <i class="bi bi-list"></i>
    </button>

    <!-- Sidebar -->
    <nav class="sidebar @(isMenuOpen ? "open" : "")" @onclick:stopPropagation>
        <div class="sidebar-header">
            <button class="close-menu" @onclick="ToggleMenu">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>
        <ul class="nav-links">
            <li>
                <NavLink href="/" Match="NavLinkMatch.All" @onclick="@(isMobile? ToggleMenu : null)">
                    <i class="bi bi-speedometer2"></i> Dashboard
                </NavLink>
            </li>

            <!-- Master Menu -->
            <li>
                <a href="javascript:void(0)" @onclick="ToggleMasterMenu">
                    <i class="bi bi-layers"></i> Master
                </a>
                @if (isMasterMenuOpen)
                {
                    <ul class="submenu">
                        <li><NavLink href="/productgroups" @onclick="@(isMobile? ToggleMenu : null)"><i class="bi bi-grid"></i> ProductGroup</NavLink></li>
                        <li><NavLink href="/products" @onclick="@(isMobile? ToggleMenu : null)"><i class="bi bi-box-seam"></i> Products</NavLink></li>
                        <li><NavLink href="/customers" @onclick="@(isMobile? ToggleMenu : null)"><i class="bi bi-people"></i> Customers</NavLink></li>
                        <li><NavLink href="/supplier" @onclick="@(isMobile? ToggleMenu : null)"><i class="bi bi-truck"></i> Supplier</NavLink></li>
                    </ul>
                }
            </li>

            <!-- Transaction Menu -->
            <li>
                <a href="javascript:void(0)" @onclick="ToggleTransactionMenu">
                    <i class="bi bi-cash-stack"></i> Transaction
                </a>
                @if (isTransactionMenuOpen)
                {
                    <ul class="submenu">
                        <li>
                            <a href="javascript:void(0)" @onclick="TogglePurchaseMenu">
                                <i class="bi bi-cart-plus"></i> Purchase
                            </a>
                            @if (isPurchaseMenuOpen)
                            {
                                <ul class="submenu">
                                    <li><NavLink href="/purchaseorder" @onclick="@(isMobile? ToggleMenu : null)"><i class="bi bi-receipt"></i> Purchase Order</NavLink></li>
                                    <li><NavLink href="/purchaseinvoice" @onclick="@(isMobile? ToggleMenu : null)"><i class="bi bi-receipt-cutoff"></i> Purchase Invoice</NavLink></li>
                                    <li><NavLink href="/purchasereturn" @onclick="@(isMobile? ToggleMenu : null)"><i class="bi bi-arrow-return-left"></i> Purchase Return</NavLink></li>
                                    <li><NavLink href="/paymentout" @onclick="@(isMobile? ToggleMenu : null)"><i class="bi bi-wallet2"></i> Payment Out</NavLink></li>
                                </ul>
                            }
                        </li>

                        <li>
                            <a href="javascript:void(0)" @onclick="ToggleSalesMenu">
                                <i class="bi bi-cart-check"></i> Sales
                            </a>
                            @if (isSalesMenuOpen)
                            {
                                <ul class="submenu">
                                    <li><NavLink href="/salesorder" @onclick="@(isMobile? ToggleMenu : null)"><i class="bi bi-receipt"></i> Sales Order</NavLink></li>
                                    <li><NavLink href="/salesinvoice" @onclick="@(isMobile? ToggleMenu : null)"><i class="bi bi-receipt-cutoff"></i> Sales Invoice</NavLink></li>
                                </ul>
                            }
                        </li>
                    </ul>
                }
            </li>

            <li><NavLink href="#" @onclick="@(isMobile? ToggleMenu : null)"><i class="bi bi-bar-chart"></i> Reports</NavLink></li>
            <li><NavLink href="#" @onclick="@(isMobile? ToggleMenu : null)"><i class="bi bi-person"></i> Profile</NavLink></li>
            <li><NavLink href="#" @onclick="@(isMobile? ToggleMenu : null)"><i class="bi bi-box-arrow-right"></i> Logout</NavLink></li>
        </ul>
    </nav>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Top Bar -->
        <header class="topbar">
            <div class="welcome-text">
                <h4>Welcome, <span class="username">User</span></h4>
                <p>Here’s a summary of today’s operational status</p>
            </div>

            <div class="user-info">
                <span class="role">Role: N/A</span><br />
                <span class="company">Company: Kalpaka Organics</span>
                <img src="images/user.png" class="user-avatar" alt="User Avatar" />
            </div>
        </header>

        <!-- Page Body -->
        <div class="page-shell">
            @Body
        </div>
    </div>
</div>

@code {
    private bool isMenuOpen = false;
    private bool isMasterMenuOpen = false;
    private bool isTransactionMenuOpen = false;
    private bool isPurchaseMenuOpen = false;
    private bool isSalesMenuOpen = false;
    private bool isMobile = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize mobile detection via JS Interop
            isMobile = await JSRuntime.InvokeAsync<bool>("isMobileDevice");
            // Set up resize listener
            await JSRuntime.InvokeVoidAsync("setupResizeListener", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void UpdateMobileState(bool mobile)
    {
        isMobile = mobile;
        StateHasChanged();
    }

    private void ToggleMenu()
    {
        isMenuOpen = !isMenuOpen;
        StateHasChanged();
    }

    private void ToggleMasterMenu() => isMasterMenuOpen = !isMasterMenuOpen;
    private void ToggleTransactionMenu() => isTransactionMenuOpen = !isTransactionMenuOpen;
    private void TogglePurchaseMenu() => isPurchaseMenuOpen = !isPurchaseMenuOpen;
    private void ToggleSalesMenu() => isSalesMenuOpen = !isSalesMenuOpen;
}

<style>
    /* Ensure body has no default background */
    body {
        margin: 0;
        padding: 0;
        background-color: #f8f9fa; /* Set body background to match main content */
    }

    .layout-container {
        display: flex;
        height: 100vh;
        overflow: hidden;
    }

    /* Fixed Hamburger Icon */
    .fixed-hamburger {
        position: fixed;
        top: 15px;
        left: 20px;
        background: none;
        border: none;
        color: #1e3a8a;
        font-size: 30px;
        cursor: pointer;
        z-index: 1100;
        background-color: #f8f9fa; /* Match main page background */
    }

    /* Sidebar */
    .sidebar {
        width: 250px;
        background: #1e3a8a;
        color: white;
        transition: transform 0.3s ease;
        position: fixed;
        height: 100%;
        overflow-y: auto;
        transform: translateX(-100%);
        z-index: 1000;
    }

        .sidebar.open {
            transform: translateX(0);
        }

        /* Prevent click events from bubbling up to main-content */
        .sidebar, .sidebar * {
            -webkit-tap-highlight-color: transparent; /* Prevent tap highlight on mobile */
        }

    /* Desktop adjustments */
    @@media (min-width: 769px) {
        .sidebar

    {
        transform: translateX(0); 
    }

    .sidebar.open {
        transform: translateX(0); /* No change needed, already visible */
    }

    .main-content {
        margin-left: 250px;  
        width: calc(100% - 250px); /* Ensure main content takes remaining space */
        transition: margin-left 0.3s ease, width 0.3s ease;
    }

        .main-content.no-sidebar {
            margin-left: 0;
            width: 100%;
        }

    }

    /* Mobile adjustments */
    @@media (max-width: 768px) {
        .sidebar

    {
        width: 70%; /* Reduced width to avoid covering half the screen */
        transform: translateX(-100%); /* Hidden by default */
    }

    .sidebar.open {
        transform: translateX(0); /* Slide in when open */
    }

    .main-content {
        margin-left: 0; /* No sidebar margin on mobile */
        width: 100%; /* Full width */
    }

    }

    .sidebar-header {
        padding: 15px;
        border-bottom: 1px solid #2d4b9e;
        display: flex;
        justify-content: flex-end;
    }

    .close-menu {
        background: none;
        border: none;
        color: white;
        font-size: 22px;
        cursor: pointer;
    }

    .nav-links {
        list-style: none;
        padding: 0;
        margin: 0;
    }

        .nav-links li a {
            display: flex;
            align-items: center;
            padding: 10px 15px;
            color: white;
            text-decoration: none;
            font-size: 16px;
        }

            .nav-links li a:hover {
                background-color: #2d4b9e;
            }

    .submenu {
        list-style: none;
        padding-left: 30px;
        margin: 5px 0;
    }

        .submenu a {
            font-size: 13px;
            padding: 5px 15px;
            display: flex;
            align-items: center;
            color: white;
            text-decoration: none;
        }

    /* Main Content */
    .main-content {
        flex: 1;
        overflow-y: auto;
        background-color: #f8f9fa;
        transition: margin-left 0.3s ease, width 0.3s ease;
    }

    /* Topbar */
    .topbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        background: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
        position: sticky;
        top: 0;
        z-index: 900;
    }

    .welcome-text h4 {
        margin: 0;
        font-size: 18px;
        color: #1e3a8a;
        text-align: center;
    }

    .welcome-text p {
        margin: 0;
        font-size: 13px;
        color: #555;
        text-align: center;
    }

    .user-info {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
    }

    .page-shell {
        padding: 20px;
    }

    /* Mobile View */
    @@media (max-width: 768px) {
        .topbar

    {
        flex-direction: column;
        align-items: center;
        gap: 8px;
        text-align: center;
    }

    .welcome-text h4 {
        font-size: 16px;
    }

    .welcome-text p {
        font-size: 12px;
    }

    .user-info {
        flex-direction: row;
        justify-content: center;
        font-size: 12px;
    }

        .user-info .company {
            display: none; /* Hide company info on mobile to save space */
        }

    .user-avatar {
        width: 35px;
        height: 35px;
    }

    }
</style>

<script>
    window.printCustom = async (elementId) => {
        const element = document.getElementById(elementId);
        if (element) {
            const printWindow = window.open('', '', 'height=600,width=800');
            if (printWindow) {
                printWindow.document.write('<html><head><title>Print Purchase Order</title>');
                printWindow.document.write('<link rel="stylesheet" href="/css/print.css" media="print" />');
                printWindow.document.write('</head><body>');
                printWindow.document.write(element.innerHTML);
                printWindow.document.write('</body></html>');
                printWindow.document.close();
                printWindow.print();
                printWindow.close();
            } else {
                alert('Popup blocked. Please allow popups for this site.');
            }
        } else {
            console.error('Element not found:', elementId);
        }
    };

    window.isMobileDevice = () => {
        return window.innerWidth <= 768;
    };

    window.setupResizeListener = (dotNetObject) => {
        const handleResize = () => {
            const isMobile = window.innerWidth <= 768;
            dotNetObject.invokeMethodAsync('UpdateMobileState', isMobile);
        };
        window.addEventListener('resize', handleResize);
        // Initial call to set the state
        handleResize();
    };
</script>